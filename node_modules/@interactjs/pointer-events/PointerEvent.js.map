{
	"version": 3,
	"sources": [
		"PointerEvent.ts"
	],
	"names": [
		"BaseEvent",
		"pointerUtils",
		"PointerEvent",
		"constructor",
		"type",
		"pointer",
		"event",
		"eventTarget",
		"interaction",
		"timeStamp",
		"pointerExtend",
		"originalEvent",
		"pointerId",
		"getPointerId",
		"pointerType",
		"getPointerType",
		"target",
		"currentTarget",
		"pointerIndex",
		"getPointerIndex",
		"dt",
		"pointers",
		"downTime",
		"interval",
		"tapTime",
		"double",
		"prevTap",
		"_subtractOrigin",
		"x",
		"originX",
		"y",
		"originY",
		"pageX",
		"pageY",
		"clientX",
		"clientY",
		"_addOrigin",
		"preventDefault"
	],
	"mappings": ";;AAAA,OAAOA,SAAP;AACA,OAAO,KAAKC,YAAZ;AAEA,eAAe,MAAMC,YAAN,SAAmDF,SAAnD,CAA6D;AAc1E;AACAG,EAAAA,WAAW,CACTC,IADS,EAETC,OAFS,EAGTC,KAHS,EAITC,WAJS,EAKTC,WALS,EAMTC,SANS,EAOT;AACA,UAAMD,WAAN;;AADA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAEAP,IAAAA,YAAY,CAACS,aAAb,CAA2B,IAA3B,EAAiCJ,KAAjC;;AAEA,QAAIA,KAAK,KAAKD,OAAd,EAAuB;AACrBJ,MAAAA,YAAY,CAACS,aAAb,CAA2B,IAA3B,EAAiCL,OAAjC;AACD;;AAED,SAAKI,SAAL,GAAqBA,SAArB;AACA,SAAKE,aAAL,GAAqBL,KAArB;AACA,SAAKF,IAAL,GAAqBA,IAArB;AACA,SAAKQ,SAAL,GAAqBX,YAAY,CAACY,YAAb,CAA0BR,OAA1B,CAArB;AACA,SAAKS,WAAL,GAAqBb,YAAY,CAACc,cAAb,CAA4BV,OAA5B,CAArB;AACA,SAAKW,MAAL,GAAqBT,WAArB;AACA,SAAKU,aAAL,GAAqB,IAArB;;AAEA,QAAIb,IAAI,KAAK,KAAb,EAAoB;AAClB,YAAMc,YAAY,GAAGV,WAAW,CAACW,eAAZ,CAA4Bd,OAA5B,CAArB;AACA,WAAKe,EAAL,GAAU,KAAKX,SAAL,GAAiBD,WAAW,CAACa,QAAZ,CAAqBH,YAArB,EAAmCI,QAA9D;AAEA,YAAMC,QAAQ,GAAG,KAAKd,SAAL,GAAiBD,WAAW,CAACgB,OAA9C;AAEA,WAAKC,MAAL,GAAc,CAAC,EAAEjB,WAAW,CAACkB,OAAZ,IACflB,WAAW,CAACkB,OAAZ,CAAoBtB,IAApB,KAA6B,WADd,IAEfI,WAAW,CAACkB,OAAZ,CAAoBV,MAApB,KAA+B,KAAKA,MAFrB,IAGfO,QAAQ,GAAG,GAHE,CAAf;AAID,KAVD,MAWK,IAAInB,IAAI,KAAK,WAAb,EAA0B;AAC7B,WAAKgB,EAAL,GAAWf,OAAD,CAAiCI,SAAjC,GAA6CD,WAAW,CAACgB,OAAnE;AACD;AACF;;AAEDG,EAAAA,eAAe,CAAE;AAAEC,IAAAA,CAAC,EAAEC,OAAL;AAAcC,IAAAA,CAAC,EAAEC;AAAjB,GAAF,EAA8C;AAC3D,SAAKC,KAAL,IAAgBH,OAAhB;AACA,SAAKI,KAAL,IAAgBF,OAAhB;AACA,SAAKG,OAAL,IAAgBL,OAAhB;AACA,SAAKM,OAAL,IAAgBJ,OAAhB;AAEA,WAAO,IAAP;AACD;;AAEDK,EAAAA,UAAU,CAAE;AAAER,IAAAA,CAAC,EAAEC,OAAL;AAAcC,IAAAA,CAAC,EAAEC;AAAjB,GAAF,EAA8C;AACtD,SAAKC,KAAL,IAAgBH,OAAhB;AACA,SAAKI,KAAL,IAAgBF,OAAhB;AACA,SAAKG,OAAL,IAAgBL,OAAhB;AACA,SAAKM,OAAL,IAAgBJ,OAAhB;AAEA,WAAO,IAAP;AACD;AAED;;;;;AAGAM,EAAAA,cAAc,GAAI;AAChB,SAAK1B,aAAL,CAAmB0B,cAAnB;AACD;;AA7EyE;AAgF5E,SAASnC,YAAT",
	"sourcesContent": [
		"import BaseEvent from '../core/BaseEvent'\nimport * as pointerUtils from '../utils/pointerUtils'\n\nexport default class PointerEvent<T extends string = any> extends BaseEvent {\n  type: T\n  originalEvent: Interact.PointerEventType\n  pointerId: number\n  pointerType: string\n  double: boolean\n  pageX: number\n  pageY: number\n  clientX: number\n  clientY: number\n  dt: number\n  eventable: any\n  [key: string]: any\n\n  /** */\n  constructor (\n    type: T,\n    pointer: Interact.PointerType | PointerEvent<any>,\n    event: Interact.PointerEventType,\n    eventTarget: Interact.EventTarget,\n    interaction: Interact.Interaction,\n    timeStamp: number,\n  ) {\n    super(interaction)\n    pointerUtils.pointerExtend(this, event)\n\n    if (event !== pointer) {\n      pointerUtils.pointerExtend(this, pointer)\n    }\n\n    this.timeStamp     = timeStamp\n    this.originalEvent = event\n    this.type          = type\n    this.pointerId     = pointerUtils.getPointerId(pointer)\n    this.pointerType   = pointerUtils.getPointerType(pointer)\n    this.target        = eventTarget\n    this.currentTarget = null\n\n    if (type === 'tap') {\n      const pointerIndex = interaction.getPointerIndex(pointer)\n      this.dt = this.timeStamp - interaction.pointers[pointerIndex].downTime\n\n      const interval = this.timeStamp - interaction.tapTime\n\n      this.double = !!(interaction.prevTap &&\n        interaction.prevTap.type !== 'doubletap' &&\n        interaction.prevTap.target === this.target &&\n        interval < 500)\n    }\n    else if (type === 'doubletap') {\n      this.dt = (pointer as PointerEvent<'tap'>).timeStamp - interaction.tapTime\n    }\n  }\n\n  _subtractOrigin ({ x: originX, y: originY }: Interact.Point) {\n    this.pageX   -= originX\n    this.pageY   -= originY\n    this.clientX -= originX\n    this.clientY -= originY\n\n    return this\n  }\n\n  _addOrigin ({ x: originX, y: originY }: Interact.Point) {\n    this.pageX   += originX\n    this.pageY   += originY\n    this.clientX += originX\n    this.clientY += originY\n\n    return this\n  }\n\n  /**\n   * Prevent the default behaviour of the original Event\n   */\n  preventDefault () {\n    this.originalEvent.preventDefault()\n  }\n}\n\nexport { PointerEvent }\n"
	]
}