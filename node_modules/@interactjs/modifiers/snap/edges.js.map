{
	"version": 3,
	"sources": [
		"edges.ts"
	],
	"names": [
		"clone",
		"extend",
		"snapSize",
		"start",
		"arg",
		"edges",
		"state",
		"targetFields",
		"left",
		"top",
		"snapEdges",
		"set",
		"defaults",
		"offset",
		"x",
		"y"
	],
	"mappings": "AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAAOA,KAAP;AACA,OAAOC,MAAP;AAGA,OAAOC,QAAP;;AAEA,SAASC,KAAT,CAAgBC,GAAhB,EAA6C;AAC3C,QAAM;AAAEC,IAAAA;AAAF,MAAYD,GAAlB;;AAEA,MAAI,CAACC,KAAL,EAAY;AAAE,WAAO,IAAP;AAAa;;AAE3BD,EAAAA,GAAG,CAACE,KAAJ,CAAUC,YAAV,GAAyBH,GAAG,CAACE,KAAJ,CAAUC,YAAV,IAA0B,CACjD,CAACF,KAAK,CAACG,IAAN,GAAa,MAAb,GAAsB,OAAvB,EAAgCH,KAAK,CAACI,GAAN,GAAY,KAAZ,GAAoB,QAApD,CADiD,CAAnD;AAIA,SAAOP,QAAQ,CAACC,KAAT,CAAeC,GAAf,CAAP;AACD;;AAED,MAAMM,SAAiD,GAAG;AACxDP,EAAAA,KADwD;AAExDQ,EAAAA,GAAG,EAAET,QAAQ,CAACS,GAF0C;AAGxDC,EAAAA,QAAQ,EAAEX,MAAM,CACdD,KAAK,CAACE,QAAQ,CAACU,QAAV,CADS,EAEd;AACEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX;AADV,GAFc;AAHwC,CAA1D;AAWA,eAAeL,SAAf",
	"sourcesContent": [
		"/**\n * @module modifiers/snapEdges\n *\n * @description\n * This module allows snapping of the edges of targets during resize\n * interactions.\n *\n * @example\n * interact(target).resizable({\n *   snapEdges: {\n *     targets: [interact.snappers.grid({ x: 100, y: 50 })],\n *   },\n * })\n *\n * interact(target).resizable({\n *   snapEdges: {\n *     targets: [\n *       interact.snappers.grid({\n *        top: 50,\n *        left: 50,\n *        bottom: 100,\n *        right: 100,\n *       }),\n *     ],\n *   },\n * })\n */\n\nimport clone from '@interactjs/utils/clone'\nimport extend from '@interactjs/utils/extend'\nimport { ModifierArg, ModifierModule } from '../base'\nimport { SnapOptions, SnapState } from './pointer'\nimport snapSize from './size'\n\nfunction start (arg: ModifierArg<SnapState>) {\n  const { edges } = arg\n\n  if (!edges) { return null }\n\n  arg.state.targetFields = arg.state.targetFields || [\n    [edges.left ? 'left' : 'right', edges.top ? 'top' : 'bottom'],\n  ]\n\n  return snapSize.start(arg)\n}\n\nconst snapEdges: ModifierModule<SnapOptions, SnapState> = {\n  start,\n  set: snapSize.set,\n  defaults: extend(\n    clone(snapSize.defaults),\n    {\n      offset: { x: 0, y: 0 },\n    } as SnapOptions,\n  ),\n}\n\nexport default snapEdges\n"
	]
}