{
	"version": 3,
	"sources": [
		"InteractableSet.ts"
	],
	"names": [
		"arr",
		"domUtils",
		"extend",
		"is",
		"InteractableSet",
		"constructor",
		"scope",
		"addListeners",
		"interactable",
		"target",
		"_context",
		"context",
		"targetMappings",
		"string",
		"selectorMap",
		"id",
		"targetIndex",
		"findIndex",
		"m",
		"splice",
		"new",
		"options",
		"actions",
		"Interactable",
		"document",
		"mappingInfo",
		"addDocument",
		"_doc",
		"list",
		"push",
		"Object",
		"defineProperty",
		"value",
		"configurable",
		"fire",
		"win",
		"_win",
		"get",
		"isSelector",
		"found",
		"find",
		"inContext",
		"forEachMatch",
		"node",
		"callback",
		"ret",
		"element",
		"matchesSelector",
		"undefined"
	],
	"mappings": "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",
	"sourcesContent": [
		"import * as arr from '@interactjs/utils/arr'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport * as is from '@interactjs/utils/is'\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactable:new': {\n      interactable: Interact.Interactable\n      target: Interact.Target\n      options: Interact.OptionsArg\n      win: Window\n    }\n  }\n}\n\ninterface InteractableScopeProp {\n  context: Document | Interact.Element\n  interactable: Interact.Interactable\n}\n\nexport default class InteractableSet {\n  // all set interactables\n  list: Interact.Interactable[] = []\n\n  selectorMap: {\n    [selector: string]: InteractableScopeProp[]\n  } = {}\n\n  constructor (protected scope: Interact.Scope) {\n    scope.addListeners({\n      'interactable:unset': ({ interactable }) => {\n        const { target, _context: context } = interactable\n        const targetMappings: InteractableScopeProp[] = is.string(target)\n          ? this.selectorMap[target]\n          : (target as any)[this.scope.id]\n\n        const targetIndex = targetMappings.findIndex(m => m.context === context)\n        if (targetMappings[targetIndex]) {\n        // Destroying mappingInfo's context and interactable\n          targetMappings[targetIndex].context = null\n          targetMappings[targetIndex].interactable = null\n        }\n        targetMappings.splice(targetIndex, 1)\n      },\n    })\n  }\n\n  new (target: Interact.Target, options?: any): Interact.Interactable {\n    options = extend(options || {}, {\n      actions: this.scope.actions,\n    })\n    const interactable = new this.scope.Interactable(target, options, this.scope.document)\n    const mappingInfo = { context: interactable._context, interactable }\n\n    this.scope.addDocument(interactable._doc)\n    this.list.push(interactable)\n\n    if (is.string(target)) {\n      if (!this.selectorMap[target]) { this.selectorMap[target] = [] }\n      this.selectorMap[target].push(mappingInfo)\n    } else {\n      if (!((interactable.target as any)[this.scope.id])) {\n        Object.defineProperty(target, this.scope.id, {\n          value: [],\n          configurable: true,\n        })\n      }\n\n      (target as any)[this.scope.id].push(mappingInfo)\n    }\n\n    this.scope.fire('interactable:new', {\n      target,\n      options,\n      interactable,\n      win: this.scope._win,\n    })\n\n    return interactable\n  }\n\n  get (target: Interact.Target, options?: Interact.Options) {\n    const context = (options && options.context) || this.scope.document\n    const isSelector = is.string(target)\n    const targetMappings: InteractableScopeProp[] = isSelector\n      ? this.selectorMap[target as string]\n      : (target as any)[this.scope.id]\n\n    if (!targetMappings) { return null }\n\n    const found = arr.find(\n      targetMappings,\n      m => m.context === context &&\n        (isSelector || m.interactable.inContext(target as any)))\n\n    return found && found.interactable\n  }\n\n  forEachMatch<T> (node: Node, callback: (interactable: Interact.Interactable) => T): T | void {\n    for (const interactable of this.list) {\n      let ret\n\n      if ((is.string(interactable.target)\n      // target is a selector and the element matches\n        ? (is.element(node) && domUtils.matchesSelector(node, interactable.target))\n        // target is the element\n        : node === interactable.target) &&\n        // the element is in context\n        (interactable.inContext(node))) {\n        ret = callback(interactable)\n      }\n\n      if (ret !== undefined) {\n        return ret\n      }\n    }\n  }\n}\n"
	]
}