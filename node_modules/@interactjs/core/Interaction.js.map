{
	"version": 3,
	"sources": [
		"Interaction.ts"
	],
	"names": [
		"utils",
		"InteractEvent",
		"EventPhase",
		"PointerInfo",
		"ActionName",
		"_ProxyValues",
		"_ProxyMethods",
		"idCounter",
		"Interaction",
		"pointerMoveTolerance",
		"constructor",
		"pointerType",
		"scopeFire",
		"name",
		"axis",
		"edges",
		"pointer",
		"event",
		"eventTarget",
		"warnOnce",
		"signalArg",
		"move",
		"start",
		"newCoords",
		"prev",
		"cur",
		"delta",
		"velocity",
		"_scopeFire",
		"that",
		"_proxy",
		"key",
		"Object",
		"defineProperty",
		"get",
		"value",
		"args",
		"interaction",
		"pointerDown",
		"pointerIndex",
		"updatePointer",
		"type",
		"action",
		"interactable",
		"element",
		"interacting",
		"pointerIsDown",
		"pointers",
		"length",
		"Gesture",
		"options",
		"enabled",
		"copyAction",
		"prepared",
		"rect",
		"getRect",
		"extend",
		"_stopped",
		"_interacting",
		"_doPhase",
		"downEvent",
		"phase",
		"Start",
		"pointerMove",
		"simulation",
		"modifiers",
		"endResult",
		"setCoords",
		"coords",
		"map",
		"p",
		"_now",
		"duplicateMove",
		"page",
		"x",
		"y",
		"client",
		"dx",
		"dy",
		"pointerWasMoved",
		"hypot",
		"getPointerIndex",
		"duplicate",
		"setCoordDeltas",
		"setCoordVelocity",
		"copyCoords",
		"setZeroCoords",
		"_latestPointer",
		"Move",
		"pointerUp",
		"curEventTarget",
		"test",
		"end",
		"removePointer",
		"documentBlur",
		"_ending",
		"endPhaseResult",
		"End",
		"stop",
		"currentAction",
		"prevEvent",
		"pointerId",
		"getPointerId",
		"arr",
		"findIndex",
		"curPointer",
		"id",
		"getPointerInfo",
		"down",
		"pointerInfo",
		"push",
		"pointerExtend",
		"downPointer",
		"downTime",
		"timeStamp",
		"downTarget",
		"_updateLatestPointer",
		"splice",
		"destroy",
		"_createPreparedEvent",
		"preEnd",
		"actionName",
		"_fireEvent",
		"iEvent",
		"fire",
		"left",
		"right",
		"top",
		"bottom",
		"addEdges",
		"deltaSource",
		"width",
		"height",
		"beforeResult",
		"Date",
		"now"
	],
	"mappings": "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",
	"sourcesContent": [
		"import * as utils from '@interactjs/utils/index'\nimport Interactable from './Interactable'\nimport InteractEvent, { EventPhase } from './InteractEvent'\nimport PointerInfo from './PointerInfo'\nimport { ActionName } from './scope'\n\nexport interface ActionProps<T extends ActionName = any> {\n  name: T\n  axis?: 'x' | 'y' | 'xy'\n  edges?: Interact.EdgeOptions\n}\n\nexport interface StartAction extends ActionProps {\n  name: ActionName | string\n}\n\nexport enum _ProxyValues {\n  interactable = '',\n  element = '',\n  prepared = '',\n  pointerIsDown = '',\n  pointerWasMoved = '',\n  _proxy = ''\n}\n\nexport enum _ProxyMethods {\n  start = '',\n  move = '',\n  end = '',\n  stop = '',\n  interacting = ''\n}\n\nexport type PointerArgProps<T extends {} = {}> = {\n  pointer: Interact.PointerType\n  event: Interact.PointerEventType\n  eventTarget: Interact.EventTarget\n  pointerIndex: number\n  interaction: Interaction\n} & T\n\nexport interface DoPhaseArg {\n  event: Interact.PointerEventType\n  phase: EventPhase\n  interaction: Interaction\n  iEvent: InteractEvent\n  preEnd?: boolean\n  type?: string\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactions:new': { interaction: Interaction }\n    'interactions:down': PointerArgProps<{\n      type: 'down'\n    }>\n    'interactions:move': PointerArgProps<{\n      type: 'move'\n      dx: number\n      dy: number\n      duplicate: boolean\n    }>\n    'interactions:up': PointerArgProps<{\n      type: 'up'\n      curEventTarget: EventTarget\n    }>\n    'interactions:cancel': SignalArgs['interactions:up'] & {\n      type: 'cancel'\n      curEventTarget: EventTarget\n    }\n    'interactions:update-pointer': PointerArgProps<{\n      pointerInfo: PointerInfo\n      down: boolean\n    }>\n    'interactions:remove-pointer': PointerArgProps<{\n      pointerInfo: PointerInfo\n    }>\n    'interactions:blur'\n    'interactions:before-action-start': Omit<DoPhaseArg, 'iEvent'>\n    'interactions:action-start': DoPhaseArg\n    'interactions:after-action-start': DoPhaseArg\n    'interactions:before-action-move': Omit<DoPhaseArg, 'iEvent'>\n    'interactions:action-move': DoPhaseArg\n    'interactions:after-action-move': DoPhaseArg\n    'interactions:before-action-end': Omit<DoPhaseArg, 'iEvent'>\n    'interactions:action-end': DoPhaseArg\n    'interactions:after-action-end': DoPhaseArg\n    'interactions:stop': { interaction: Interaction }\n  }\n}\n\nexport type _InteractionProxy = Pick<\nInteraction,\nkeyof typeof _ProxyValues | keyof typeof _ProxyMethods\n>\n\nlet idCounter = 0\n\nexport class Interaction<T extends ActionName = any> {\n  // current interactable being interacted with\n  interactable: Interactable = null\n\n  // the target element of the interactable\n  element: Interact.Element = null\n  rect: Interact.FullRect\n  _rects?: {\n    start: Interact.FullRect\n    corrected: Interact.FullRect\n    previous: Interact.FullRect\n    delta: Interact.FullRect\n  }\n  edges: Interact.EdgeOptions\n\n  _scopeFire: Interact.Scope['fire']\n\n  // action that's ready to be fired on next move event\n  prepared: ActionProps<T> = {\n    name : null,\n    axis : null,\n    edges: null,\n  }\n\n  pointerType: string\n\n  // keep track of added pointers\n  pointers: PointerInfo[] = []\n\n  // pointerdown/mousedown/touchstart event\n  downEvent: Interact.PointerEventType = null\n\n  downPointer: Interact.PointerType = {} as Interact.PointerType\n\n  _latestPointer: {\n    pointer: Interact.EventTarget\n    event: Interact.PointerEventType\n    eventTarget: Node\n  } = {\n    pointer: null,\n    event: null,\n    eventTarget: null,\n  }\n\n  // previous action event\n  prevEvent: InteractEvent<T> = null\n\n  pointerIsDown = false\n  pointerWasMoved = false\n  _interacting = false\n  _ending = false\n  _stopped = true\n  _proxy: _InteractionProxy = null\n\n  simulation = null\n\n  get pointerMoveTolerance () {\n    return 1\n  }\n\n  /**\n   * @alias Interaction.prototype.move\n   */\n  doMove = utils.warnOnce(\n    function (this: Interaction, signalArg: any) {\n      this.move(signalArg)\n    },\n    'The interaction.doMove() method has been renamed to interaction.move()')\n\n  coords: Interact.CoordsSet = {\n    // Starting InteractEvent pointer coordinates\n    start: utils.pointer.newCoords(),\n    // Previous native pointer move event coordinates\n    prev: utils.pointer.newCoords(),\n    // current native pointer move event coordinates\n    cur: utils.pointer.newCoords(),\n    // Change in coordinates and time of the pointer\n    delta: utils.pointer.newCoords(),\n    // pointer velocity\n    velocity: utils.pointer.newCoords(),\n  }\n\n  readonly _id: number = idCounter++\n\n  /** */\n  constructor ({ pointerType, scopeFire }: {\n    pointerType?: string\n    scopeFire: Interact.Scope['fire']\n  }) {\n    this._scopeFire = scopeFire\n    this.pointerType = pointerType\n\n    const that = this\n\n    this._proxy = {} as _InteractionProxy\n\n    for (const key in _ProxyValues) {\n      Object.defineProperty(this._proxy, key, {\n        get () { return that[key] },\n      })\n    }\n\n    for (const key in _ProxyMethods) {\n      Object.defineProperty(this._proxy, key, {\n        value: (...args) => that[key](...args),\n      })\n    }\n\n    this._scopeFire('interactions:new', { interaction: this })\n  }\n\n  pointerDown (pointer: Interact.PointerType, event: Interact.PointerEventType, eventTarget: Interact.EventTarget) {\n    const pointerIndex = this.updatePointer(pointer, event, eventTarget, true)\n\n    this._scopeFire('interactions:down', {\n      pointer,\n      event,\n      eventTarget,\n      pointerIndex,\n      type: 'down',\n      interaction: this,\n    })\n  }\n\n  /**\n   * ```js\n   * interact(target)\n   *   .draggable({\n   *     // disable the default drag start by down->move\n   *     manualStart: true\n   *   })\n   *   // start dragging after the user holds the pointer down\n   *   .on('hold', function (event) {\n   *     var interaction = event.interaction\n   *\n   *     if (!interaction.interacting()) {\n   *       interaction.start({ name: 'drag' },\n   *                         event.interactable,\n   *                         event.currentTarget)\n   *     }\n   * })\n   * ```\n   *\n   * Start an action with the given Interactable and Element as tartgets. The\n   * action must be enabled for the target Interactable and an appropriate\n   * number of pointers must be held down - 1 for drag/resize, 2 for gesture.\n   *\n   * Use it with `interactable.<action>able({ manualStart: false })` to always\n   * [start actions manually](https://github.com/taye/interact.js/issues/114)\n   *\n   * @param {object} action   The action to be performed - drag, resize, etc.\n   * @param {Interactable} target  The Interactable to target\n   * @param {Element} element The DOM Element to target\n   * @return {object} interact\n   */\n  start (action: StartAction, interactable: Interactable, element: Interact.Element) {\n    if (this.interacting() ||\n        !this.pointerIsDown ||\n        this.pointers.length < (action.name === ActionName.Gesture ? 2 : 1) ||\n        !interactable.options[action.name].enabled) {\n      return false\n    }\n\n    utils.copyAction(this.prepared, action)\n\n    this.interactable = interactable\n    this.element      = element\n    this.rect         = interactable.getRect(element)\n    this.edges        = utils.extend({}, this.prepared.edges)\n    this._stopped     = false\n    this._interacting = this._doPhase({\n      interaction: this,\n      event: this.downEvent,\n      phase: EventPhase.Start,\n    }) && !this._stopped\n\n    return this._interacting\n  }\n\n  pointerMove (pointer: Interact.PointerType, event: Interact.PointerEventType, eventTarget: Interact.EventTarget) {\n    if (!this.simulation && !(this.modifiers && this.modifiers.endResult)) {\n      this.updatePointer(pointer, event, eventTarget, false)\n      utils.pointer.setCoords(this.coords.cur, this.pointers.map(p => p.pointer), this._now())\n    }\n\n    const duplicateMove = (this.coords.cur.page.x === this.coords.prev.page.x &&\n                           this.coords.cur.page.y === this.coords.prev.page.y &&\n                           this.coords.cur.client.x === this.coords.prev.client.x &&\n                           this.coords.cur.client.y === this.coords.prev.client.y)\n\n    let dx\n    let dy\n\n    // register movement greater than pointerMoveTolerance\n    if (this.pointerIsDown && !this.pointerWasMoved) {\n      dx = this.coords.cur.client.x - this.coords.start.client.x\n      dy = this.coords.cur.client.y - this.coords.start.client.y\n\n      this.pointerWasMoved = utils.hypot(dx, dy) > this.pointerMoveTolerance\n    }\n\n    const signalArg = {\n      pointer,\n      pointerIndex: this.getPointerIndex(pointer),\n      event,\n      type: 'move' as const,\n      eventTarget,\n      dx,\n      dy,\n      duplicate: duplicateMove,\n      interaction: this,\n    }\n\n    if (!duplicateMove) {\n      // set pointer coordinate, time changes and velocity\n      utils.pointer.setCoordDeltas(this.coords.delta, this.coords.prev, this.coords.cur)\n      utils.pointer.setCoordVelocity(this.coords.velocity, this.coords.delta)\n    }\n\n    this._scopeFire('interactions:move', signalArg)\n\n    if (!duplicateMove) {\n      // if interacting, fire an 'action-move' signal etc\n      if (this.interacting()) {\n        signalArg.type = null\n        this.move(signalArg)\n      }\n\n      if (this.pointerWasMoved) {\n        utils.pointer.copyCoords(this.coords.prev, this.coords.cur)\n      }\n    }\n  }\n\n  /**\n   * ```js\n   * interact(target)\n   *   .draggable(true)\n   *   .on('dragmove', function (event) {\n   *     if (someCondition) {\n   *       // change the snap settings\n   *       event.interactable.draggable({ snap: { targets: [] }})\n   *       // fire another move event with re-calculated snap\n   *       event.interaction.move()\n   *     }\n   *   })\n   * ```\n   *\n   * Force a move of the current action at the same coordinates. Useful if\n   * snap/restrict has been changed and you want a movement with the new\n   * settings.\n   */\n  move (signalArg?) {\n    if (!signalArg || !signalArg.event) {\n      utils.pointer.setZeroCoords(this.coords.delta)\n    }\n\n    signalArg = utils.extend({\n      pointer: this._latestPointer.pointer,\n      event: this._latestPointer.event,\n      eventTarget: this._latestPointer.eventTarget,\n      interaction: this,\n    }, signalArg || {})\n\n    signalArg.phase = EventPhase.Move\n\n    this._doPhase(signalArg)\n  }\n\n  // End interact move events and stop auto-scroll unless simulation is running\n  pointerUp (pointer: Interact.PointerType, event: Interact.PointerEventType, eventTarget: Interact.EventTarget, curEventTarget: Interact.EventTarget) {\n    let pointerIndex = this.getPointerIndex(pointer)\n\n    if (pointerIndex === -1) {\n      pointerIndex = this.updatePointer(pointer, event, eventTarget, false)\n    }\n\n    const type = /cancel$/i.test(event.type) ? 'cancel' : 'up'\n\n    this._scopeFire(`interactions:${type}` as 'interactions:up' | 'interactions:cancel', {\n      pointer,\n      pointerIndex,\n      event,\n      eventTarget,\n      type: type as any,\n      curEventTarget,\n      interaction: this,\n    })\n\n    if (!this.simulation) {\n      this.end(event)\n    }\n\n    this.pointerIsDown = false\n    this.removePointer(pointer, event)\n  }\n\n  documentBlur (event) {\n    this.end(event)\n    this._scopeFire('interactions:blur', { event, type: 'blur', interaction: this })\n  }\n\n  /**\n   * ```js\n   * interact(target)\n   *   .draggable(true)\n   *   .on('move', function (event) {\n   *     if (event.pageX > 1000) {\n   *       // end the current action\n   *       event.interaction.end()\n   *       // stop all further listeners from being called\n   *       event.stopImmediatePropagation()\n   *     }\n   *   })\n   * ```\n   *\n   * @param {PointerEvent} [event]\n   */\n  end (event?: Interact.PointerEventType) {\n    this._ending = true\n    event = event || this._latestPointer.event\n    let endPhaseResult\n\n    if (this.interacting()) {\n      endPhaseResult = this._doPhase({\n        event,\n        interaction: this,\n        phase: EventPhase.End,\n      })\n    }\n\n    this._ending = false\n\n    if (endPhaseResult === true) {\n      this.stop()\n    }\n  }\n\n  currentAction () {\n    return this._interacting ? this.prepared.name : null\n  }\n\n  interacting () {\n    return this._interacting\n  }\n\n  /** */\n  stop () {\n    this._scopeFire('interactions:stop', { interaction: this })\n\n    this.interactable = this.element = null\n\n    this._interacting = false\n    this._stopped = true\n    this.prepared.name = this.prevEvent = null\n  }\n\n  getPointerIndex (pointer) {\n    const pointerId = utils.pointer.getPointerId(pointer)\n\n    // mouse and pen interactions may have only one pointer\n    return (this.pointerType === 'mouse' || this.pointerType === 'pen')\n      ? this.pointers.length - 1\n      : utils.arr.findIndex(this.pointers, curPointer => curPointer.id === pointerId)\n  }\n\n  getPointerInfo (pointer) {\n    return this.pointers[this.getPointerIndex(pointer)]\n  }\n\n  updatePointer (pointer: Interact.PointerType, event: Interact.PointerEventType, eventTarget: Interact.EventTarget, down?: boolean) {\n    const id = utils.pointer.getPointerId(pointer)\n    let pointerIndex = this.getPointerIndex(pointer)\n    let pointerInfo = this.pointers[pointerIndex]\n\n    down = down === false\n      ? false\n      : down || /(down|start)$/i.test(event.type)\n\n    if (!pointerInfo) {\n      pointerInfo = new PointerInfo(\n        id,\n        pointer,\n        event,\n        null,\n        null,\n      )\n\n      pointerIndex = this.pointers.length\n      this.pointers.push(pointerInfo)\n    }\n    else {\n      pointerInfo.pointer = pointer\n    }\n\n    if (down) {\n      this.pointerIsDown = true\n\n      if (!this.interacting()) {\n        utils.pointer.setCoords(this.coords.start, this.pointers.map(p => p.pointer), this._now())\n\n        utils.pointer.copyCoords(this.coords.cur, this.coords.start)\n        utils.pointer.copyCoords(this.coords.prev, this.coords.start)\n        utils.pointer.pointerExtend(this.downPointer, pointer)\n\n        this.downEvent = event\n        pointerInfo.downTime = this.coords.cur.timeStamp\n        pointerInfo.downTarget = eventTarget\n\n        this.pointerWasMoved = false\n      }\n    }\n\n    this._updateLatestPointer(pointer, event, eventTarget)\n\n    this._scopeFire('interactions:update-pointer', {\n      pointer,\n      event,\n      eventTarget,\n      down,\n      pointerInfo,\n      pointerIndex,\n      interaction: this,\n    })\n\n    return pointerIndex\n  }\n\n  removePointer (pointer: Interact.PointerType, event: Interact.PointerEventType) {\n    const pointerIndex = this.getPointerIndex(pointer)\n\n    if (pointerIndex === -1) { return }\n\n    const pointerInfo = this.pointers[pointerIndex]\n\n    this._scopeFire('interactions:remove-pointer', {\n      pointer,\n      event,\n      eventTarget: null,\n      pointerIndex,\n      pointerInfo,\n      interaction: this,\n    })\n\n    this.pointers.splice(pointerIndex, 1)\n  }\n\n  _updateLatestPointer (pointer, event, eventTarget) {\n    this._latestPointer.pointer = pointer\n    this._latestPointer.event = event\n    this._latestPointer.eventTarget = eventTarget\n  }\n\n  destroy () {\n    this._latestPointer.pointer = null\n    this._latestPointer.event = null\n    this._latestPointer.eventTarget = null\n  }\n\n  _createPreparedEvent (event: Interact.PointerEventType, phase: EventPhase, preEnd?: boolean, type?: string) {\n    const actionName = this.prepared.name\n\n    return new InteractEvent(this, event, actionName, phase, this.element, null, preEnd, type)\n  }\n\n  _fireEvent (iEvent: InteractEvent) {\n    this.interactable.fire(iEvent)\n\n    if (!this.prevEvent || iEvent.timeStamp >= this.prevEvent.timeStamp) {\n      this.prevEvent = iEvent\n    }\n  }\n\n  _doPhase (signalArg: Omit<DoPhaseArg, 'iEvent'> & { iEvent?: InteractEvent<T> }) {\n    const { event, phase, preEnd, type } = signalArg\n    const { rect, coords: { delta } } = this\n\n    if (rect && phase === EventPhase.Move) {\n      // update the rect modifications\n      const edges = this.edges || this.prepared.edges || { left: true, right: true, top: true, bottom: true }\n      utils.rect.addEdges(edges, rect, delta[this.interactable.options.deltaSource])\n\n      rect.width = rect.right - rect.left\n      rect.height = rect.bottom - rect.top\n    }\n\n    const beforeResult = this._scopeFire(`interactions:before-action-${phase}` as any, signalArg)\n\n    if (beforeResult === false) {\n      return false\n    }\n\n    const iEvent = signalArg.iEvent = this._createPreparedEvent(event, phase, preEnd, type)\n\n    this._scopeFire(`interactions:action-${phase}` as any, signalArg)\n\n    if (phase === 'start') { this.prevEvent = iEvent }\n\n    this._fireEvent(iEvent)\n\n    this._scopeFire(`interactions:after-action-${phase}` as any, signalArg)\n\n    return true\n  }\n\n  _now () { return Date.now() }\n}\n\nexport default Interaction\nexport { PointerInfo }\n"
	]
}