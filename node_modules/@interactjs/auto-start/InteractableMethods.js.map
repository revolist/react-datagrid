{
	"version": 3,
	"sources": [
		"InteractableMethods.ts"
	],
	"names": [
		"warnOnce",
		"is",
		"install",
		"scope",
		"Interactable",
		"prototype",
		"getAction",
		"pointer",
		"event",
		"interaction",
		"element",
		"action",
		"defaultActionChecker",
		"options",
		"actionChecker",
		"ignoreFrom",
		"newValue",
		"_backCompatOption",
		"allowFrom",
		"styleCursor",
		"interactable",
		"rect",
		"getRect",
		"buttons",
		"button",
		"arg",
		"fire",
		"bool",
		"checker",
		"func",
		"id"
	],
	"mappings": "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",
	"sourcesContent": [
		"import { warnOnce } from '@interactjs/utils/index'\nimport * as is from '@interactjs/utils/is'\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    getAction: (\n      this: Interact.Interactable,\n      pointer: Interact.PointerType,\n      event: Interact.PointerEventType,\n      interaction: Interact.Interaction,\n      element: Interact.Element,\n    ) => Interact.ActionProps | null\n    styleCursor: typeof styleCursor\n    actionChecker: typeof actionChecker\n    ignoreFrom: {\n      (...args: any[]): Interactable\n      (): boolean\n    }\n    allowFrom: {\n      (...args: any[]): Interactable\n      (): boolean\n    }\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    pointerIsDown: boolean\n  }\n}\n\nfunction install (scope: Interact.Scope) {\n  const {\n    /** @lends Interactable */\n    Interactable, // tslint:disable-line no-shadowed-variable\n  } = scope\n\n  Interactable.prototype.getAction = function getAction (\n    this: Interact.Interactable,\n    pointer: Interact.PointerType,\n    event: Interact.PointerEventType,\n    interaction: Interact.Interaction,\n    element: Interact.Element,\n  ): Interact.ActionProps {\n    const action = defaultActionChecker(this, event, interaction, element, scope)\n\n    if (this.options.actionChecker) {\n      return this.options.actionChecker(pointer, event, action, this, element, interaction)\n    }\n\n    return action\n  }\n\n  /**\n   * ```js\n   * interact(element, { ignoreFrom: document.getElementById('no-action') })\n   * // or\n   * interact(element).ignoreFrom('input, textarea, a')\n   * ```\n   * @deprecated\n   * If the target of the `mousedown`, `pointerdown` or `touchstart` event or any\n   * of it's parents match the given CSS selector or Element, no\n   * drag/resize/gesture is started.\n   *\n   * Don't use this method. Instead set the `ignoreFrom` option for each action\n   * or for `pointerEvents`\n   *\n   * @example\n   * interact(targett)\n   *   .draggable({\n   *     ignoreFrom: 'input, textarea, a[href]'',\n   *   })\n   *   .pointerEvents({\n   *     ignoreFrom: '[no-pointer]',\n   *   })\n   *\n   * @param {string | Element | null} [newValue] a CSS selector string, an\n   * Element or `null` to not ignore any elements\n   * @return {string | Element | object} The current ignoreFrom value or this\n   * Interactable\n   */\n  Interactable.prototype.ignoreFrom = warnOnce(function (this: Interact.Interactable, newValue) {\n    return this._backCompatOption('ignoreFrom', newValue)\n  }, 'Interactable.ignoreFrom() has been deprecated. Use Interactble.draggable({ignoreFrom: newValue}).')\n\n  /**\n   * @deprecated\n   *\n   * A drag/resize/gesture is started only If the target of the `mousedown`,\n   * `pointerdown` or `touchstart` event or any of it's parents match the given\n   * CSS selector or Element.\n   *\n   * Don't use this method. Instead set the `allowFrom` option for each action\n   * or for `pointerEvents`\n   *\n   * @example\n   * interact(targett)\n   *   .resizable({\n   *     allowFrom: '.resize-handle',\n   *   .pointerEvents({\n   *     allowFrom: '.handle',,\n   *   })\n   *\n   * @param {string | Element | null} [newValue] a CSS selector string, an\n   * Element or `null` to allow from any element\n   * @return {string | Element | object} The current allowFrom value or this\n   * Interactable\n   */\n  Interactable.prototype.allowFrom = warnOnce(function (this: Interact.Interactable, newValue) {\n    return this._backCompatOption('allowFrom', newValue)\n  }, 'Interactable.allowFrom() has been deprecated. Use Interactble.draggable({allowFrom: newValue}).')\n\n  /**\n   * ```js\n   * interact('.resize-drag')\n   *   .resizable(true)\n   *   .draggable(true)\n   *   .actionChecker(function (pointer, event, action, interactable, element, interaction) {\n   *\n   *   if (interact.matchesSelector(event.target, '.drag-handle')) {\n   *     // force drag with handle target\n   *     action.name = drag\n   *   }\n   *   else {\n   *     // resize from the top and right edges\n   *     action.name  = 'resize'\n   *     action.edges = { top: true, right: true }\n   *   }\n   *\n   *   return action\n   * })\n   * ```\n   *\n   * Returns or sets the function used to check action to be performed on\n   * pointerDown\n   *\n   * @param {function | null} [checker] A function which takes a pointer event,\n   * defaultAction string, interactable, element and interaction as parameters\n   * and returns an object with name property 'drag' 'resize' or 'gesture' and\n   * optionally an `edges` object with boolean 'top', 'left', 'bottom' and right\n   * props.\n   * @return {Function | Interactable} The checker function or this Interactable\n   */\n  Interactable.prototype.actionChecker = actionChecker\n\n  /**\n   * Returns or sets whether the the cursor should be changed depending on the\n   * action that would be performed if the mouse were pressed and dragged.\n   *\n   * @param {boolean} [newValue]\n   * @return {boolean | Interactable} The current setting or this Interactable\n   */\n  Interactable.prototype.styleCursor = styleCursor\n}\n\nfunction defaultActionChecker (\n  interactable: Interact.Interactable,\n  event: Interact.PointerEventType,\n  interaction: Interact.Interaction,\n  element: Interact.Element,\n  scope: Interact.Scope,\n) {\n  const rect = interactable.getRect(element)\n  const buttons = (event as MouseEvent).buttons || ({\n    0: 1,\n    1: 4,\n    3: 8,\n    4: 16,\n  })[(event as MouseEvent).button as 0 | 1 | 3 | 4]\n  const arg = {\n    action: null,\n    interactable,\n    interaction,\n    element,\n    rect,\n    buttons,\n  }\n\n  scope.fire('auto-start:check', arg)\n\n  return arg.action\n}\n\nfunction styleCursor (this: Interact.Interactable, newValue?: boolean) {\n  if (is.bool(newValue)) {\n    this.options.styleCursor = newValue\n\n    return this\n  }\n\n  if (newValue === null) {\n    delete this.options.styleCursor\n\n    return this\n  }\n\n  return this.options.styleCursor\n}\n\nfunction actionChecker (this: Interact.Interactable, checker: any) {\n  if (is.func(checker)) {\n    this.options.actionChecker = checker\n\n    return this\n  }\n\n  if (checker === null) {\n    delete this.options.actionChecker\n\n    return this\n  }\n\n  return this.options.actionChecker\n}\n\nexport default {\n  id: 'auto-start/interactableMethods',\n  install,\n}\n"
	]
}