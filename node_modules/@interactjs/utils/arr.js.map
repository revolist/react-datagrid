{
	"version": 3,
	"sources": [
		"arr.ts"
	],
	"names": [
		"contains",
		"array",
		"target",
		"indexOf",
		"remove",
		"splice",
		"merge",
		"source",
		"item",
		"push",
		"from",
		"findIndex",
		"func",
		"i",
		"length",
		"find"
	],
	"mappings": "AAEA,OAAO,SAASA,QAAT,CAAsBC,KAAtB,EAAkCC,MAAlC,EAA6C;AAClD,SAAOD,KAAK,CAACE,OAAN,CAAcD,MAAd,MAA0B,CAAC,CAAlC;AACD;AAED,OAAO,SAASE,MAAT,CAAoBH,KAApB,EAAgCC,MAAhC,EAA2C;AAChD,SAAOD,KAAK,CAACI,MAAN,CAAaJ,KAAK,CAACE,OAAN,CAAcD,MAAd,CAAb,EAAoC,CAApC,CAAP;AACD;AAED,OAAO,SAASI,KAAT,CAAsBJ,MAAtB,EAA4CK,MAA5C,EAAyD;AAC9D,OAAK,MAAMC,IAAX,IAAmBD,MAAnB,EAA2B;AACzBL,IAAAA,MAAM,CAACO,IAAP,CAAYD,IAAZ;AACD;;AAED,SAAON,MAAP;AACD;AAED,OAAO,SAASQ,IAAT,CAAwBH,MAAxB,EAA8C;AACnD,SAAOD,KAAK,CAAC,EAAD,EAAYC,MAAZ,CAAZ;AACD;AAED,OAAO,SAASI,SAAT,CAAuBV,KAAvB,EAAmCW,IAAnC,EAAoD;AACzD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,KAAK,CAACa,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAID,IAAI,CAACX,KAAK,CAACY,CAAD,CAAN,EAAWA,CAAX,EAAcZ,KAAd,CAAR,EAA8B;AAC5B,aAAOY,CAAP;AACD;AACF;;AAED,SAAO,CAAC,CAAR;AACD;AAED,OAAO,SAASE,IAAT,CAAwBd,KAAxB,EAAoCW,IAApC,EAAqD;AAC1D,SAAOX,KAAK,CAACU,SAAS,CAACV,KAAD,EAAQW,IAAR,CAAV,CAAZ;AACD",
	"sourcesContent": [
		"type Filter<T> = (element: T, index: number, array: T[]) => boolean\n\nexport function contains<T> (array: T[], target: T) {\n  return array.indexOf(target) !== -1\n}\n\nexport function remove<T> (array: T[], target: T) {\n  return array.splice(array.indexOf(target), 1)\n}\n\nexport function merge<T, U> (target: Array<T | U>, source: U[]) {\n  for (const item of source) {\n    target.push(item)\n  }\n\n  return target\n}\n\nexport function from<T = any> (source: ArrayLike<T>) {\n  return merge([] as T[], source as T[])\n}\n\nexport function findIndex<T> (array: T[], func: Filter<T>) {\n  for (let i = 0; i < array.length; i++) {\n    if (func(array[i], i, array)) {\n      return i\n    }\n  }\n\n  return -1\n}\n\nexport function find<T = any> (array: T[], func: Filter<T>) {\n  return array[findIndex(array, func)]\n}\n"
	]
}