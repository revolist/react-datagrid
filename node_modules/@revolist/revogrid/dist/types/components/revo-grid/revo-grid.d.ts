import { ObservableMap } from '@stencil/store';
import ColumnDataProvider from '../../services/column.data.provider';
import { DataProvider } from '../../services/data.provider';
import { DataSourceState } from '../../store/dataSource/data.store';
import DimensionProvider from '../../services/dimension.provider';
import ViewportProvider from "../../services/viewport.provider";
import { RevoGrid } from "../../interfaces";
declare type ColumnStores = {
    [T in RevoGrid.DimensionCols]: ObservableMap<DataSourceState<RevoGrid.ColumnDataSchemaRegular>>;
};
declare type RowStores = {
    [T in RevoGrid.DimensionRows]: ObservableMap<DataSourceState<RevoGrid.DataType>>;
};
declare type DimensionStores = {
    [T in RevoGrid.MultiDimensionType]: ObservableMap<RevoGrid.DimensionSettingsState>;
};
declare type ViewportStores = {
    [T in RevoGrid.MultiDimensionType]: ObservableMap<RevoGrid.ViewportState>;
};
export declare class RevoGridComponent {
    /**
     * Defines how many rows/columns should be rendered outside visible area.
     */
    frameSize: number;
    /**
     * Indicates default row size.
     */
    rowSize: number;
    /**
     * Indicates default column size.
     */
    colSize: number;
    /**
     * When true, user can range selection.
     */
    range: boolean;
    /**
     * When true, grid in read only mode.
     */
    readonly: boolean;
    /**
     * When true, columns are resizable.
     */
    resize: boolean;
    /**
     * Columns - defines an array of grid columns. Can be column or grouped column.
     */
    columns: (RevoGrid.ColumnDataSchemaRegular | RevoGrid.ColumnDataSchemaGrouping)[];
    /**
     * Source: {[T in ColumnProp]: any} - defines main data source.
     * Can be an Object or 2 dimensional array([][]);
     * ColumnProp - string|number. It is reference for column mapping.
     */
    source: RevoGrid.DataType[];
    /**
     * Pinned top Source: {[T in ColumnProp]: any} - defines pinned top rows data source.
     */
    pinnedTopSource: RevoGrid.DataType[];
    /**
     * Pinned bottom Source: {[T in ColumnProp]: any} - defines pinned bottom rows data source.
     */
    pinnedBottomSource: RevoGrid.DataType[];
    uuid: string | null;
    columnProvider: ColumnDataProvider;
    dataProvider: DataProvider;
    dimensionProvider: DimensionProvider;
    viewportProvider: ViewportProvider;
    element: HTMLElement;
    columnChanged(newVal: RevoGrid.ColumnData): void;
    dataChanged(newVal: RevoGrid.DataType[]): void;
    dataBottomChanged(newVal: RevoGrid.DataType[]): void;
    dataTopChanged(newVal: RevoGrid.DataType[]): void;
    get columnStores(): ColumnStores;
    get rowStores(): RowStores;
    get dimensionStores(): DimensionStores;
    get viewportStores(): ViewportStores;
    connectedCallback(): void;
    render(): any;
}
export {};
