import { EventEmitter } from '../../stencil-public-runtime';
import '../../utils/closestPolifill';
import { DataProvider } from '../../services/data.provider';
import { DataSourceState } from '../../store/dataSource/data.store';
import { ObservableMap } from '@stencil/store';
import { RevoGrid } from "../../interfaces";
/**
 * Renders viewport
 * @Component
 * @Prop uuid - grid id
 * @Prop resize - can resize grid
 * @Prop readonly - can edit grid
 * @Prop range - can change range
 * */
export declare class RevogrViewport {
    private elementToScroll;
    private scrollingService;
    private selectionStoreConnector;
    setDimensionSize: EventEmitter<{
        type: RevoGrid.MultiDimensionType;
        sizes: RevoGrid.ViewSettingSizeProp;
    }>;
    setViewportCoordinate: EventEmitter<RevoGrid.ViewPortScrollEvent>;
    setViewportSize: EventEmitter<RevoGrid.ViewPortResizeEvent>;
    element: Element;
    columnStores: {
        [T in RevoGrid.DimensionCols]: ObservableMap<DataSourceState<RevoGrid.ColumnDataSchemaRegular>>;
    };
    rowStores: {
        [T in RevoGrid.DimensionRows]: ObservableMap<DataSourceState<RevoGrid.DataType>>;
    };
    dimensions: {
        [T in RevoGrid.MultiDimensionType]: ObservableMap<RevoGrid.DimensionSettingsState>;
    };
    viewports: {
        [T in RevoGrid.MultiDimensionType]: ObservableMap<RevoGrid.ViewportState>;
    };
    dataProvider: DataProvider;
    uuid: string | null;
    resize: boolean;
    readonly: boolean;
    range: boolean;
    onRange(canRange: boolean): void;
    /** Clear data which is outside of grid container */
    handleOutsideClick(e: KeyboardEvent): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    componentDidRender(): void;
    render(): any;
    /** Collect data for pinned columns in required @ViewportProps format */
    private pinnedColumnData;
    /** Collect data for central(core) part */
    private centerData;
    /** Collect Row data */
    private dataViewPort;
    /** Receive last visible in viewport by required type */
    private getLastCell;
}
