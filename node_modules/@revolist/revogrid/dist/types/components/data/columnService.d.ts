import { VNode } from '../../stencil-public-runtime';
import { DataSourceState } from "../../store/dataSource/data.store";
import { ObservableMap } from "@stencil/store";
import BeforeSaveDataDetails = Edition.BeforeSaveDataDetails;
import { Edition, RevoGrid } from "../../interfaces";
export interface ColumnServiceI {
    columns: RevoGrid.ColumnDataSchemaRegular[];
    setCellData(r: number, c: number, val: string): void;
    cellRenderer(r: number, c: number): string | VNode;
    isReadOnly(r: number, c: number): boolean;
    getCellData(r: number, c: number): string;
}
export default class ColumnService implements ColumnServiceI {
    private dataStore;
    private source;
    get columns(): RevoGrid.ColumnDataSchemaRegular[];
    set columns(source: RevoGrid.ColumnDataSchemaRegular[]);
    constructor(dataStore: ObservableMap<DataSourceState<RevoGrid.DataType>>, columns: RevoGrid.ColumnDataSchemaRegular[]);
    isReadOnly(r: number, c: number): boolean;
    cellRenderer(r: number, c: number): string | VNode;
    setCellData(r: number, c: number, val: string): void;
    getCellData(r: number, c: number): string;
    getSaveData(r: number, c: number, val: string): BeforeSaveDataDetails;
    rowDataModel(r: number, c: number): RevoGrid.ColumnDataSchemaModel;
}
