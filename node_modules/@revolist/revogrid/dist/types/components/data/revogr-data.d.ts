import { EventEmitter } from '../../stencil-public-runtime';
import { HTMLStencilElement } from '../../stencil-public-runtime';
import { ObservableMap } from '@stencil/store';
import ColumnService from './columnService';
import { DataSourceState } from '../../store/dataSource/data.store';
import { Edition, RevoGrid, Selection } from "../../interfaces";
export declare class RevogrData {
    element: HTMLStencilElement;
    columnService: ColumnService;
    dataStore: ObservableMap<DataSourceState<RevoGrid.DataType>>;
    selectionStoreConnector: Selection.SelectionStoreConnectorI;
    dimensionRow: ObservableMap<RevoGrid.DimensionSettingsState>;
    dimensionCol: ObservableMap<RevoGrid.DimensionSettingsState>;
    readonly: boolean;
    range: boolean;
    rows: RevoGrid.VirtualPositionItem[];
    cols: RevoGrid.VirtualPositionItem[];
    lastCell: Selection.Cell;
    position: Selection.Cell;
    uuid: string;
    colData: RevoGrid.ColumnDataSchemaRegular[];
    colChanged(newData: RevoGrid.ColumnDataSchemaRegular[]): void;
    afterEdit: EventEmitter<Edition.BeforeSaveDataDetails>;
    beforeEdit: EventEmitter<Edition.BeforeSaveDataDetails>;
    onSave(e: CustomEvent<Edition.SaveDataDetails>): void;
    connectedCallback(): void;
    render(): any;
}
