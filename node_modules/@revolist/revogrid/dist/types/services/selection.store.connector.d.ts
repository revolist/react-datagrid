import { Edition, Selection } from '../interfaces';
import { ObservableMap } from '@stencil/store';
import RangeArea = Selection.RangeArea;
import Cell = Selection.Cell;
import EditCell = Edition.EditCell;
import SelectionStoreConnectorI = Selection.SelectionStoreConnectorI;
export declare type State = {
    range: RangeArea | null;
    tempRange: RangeArea | null;
    focus: Cell | null;
    edit: EditCell | null;
    lastCell: Cell | null;
};
export default class SelectionStoreConnector implements SelectionStoreConnectorI {
    private readonly stores;
    private focusedStore;
    register(y: number, x: number): ObservableMap<State>;
    focus(store: ObservableMap<State>, focus: Selection.Cell, end: Selection.Cell): void;
    clearAll(): void;
    clearFocus(s: ObservableMap<State>): void;
    setRange(store: ObservableMap<State>, start: Cell, end: Cell): void;
    get edit(): EditCell | undefined;
    setEdit(val: string | boolean): void;
    get focused(): Cell | undefined;
    change(changes: Partial<Cell>, isMulti?: boolean): void;
    unregister(store: ObservableMap<State>): void;
    private getXStores;
    private getYStores;
}
