import { Component, h, Listen, Prop, Watch } from '@stencil/core';
import { getItemByIndex } from '../../../store/dimension/dimension.helpers';
import CellSelectionService from './cellSelectionService';
import SelectionStore from '../../../store/selection/selection.store';
import { codesLetter } from '../../../utils/keyCodes';
import { isLetterKey } from '../../../utils/keyCodes.utils';
import { CELL_CLASS, FOCUS_CLASS, SELECTION_BG_CLASS, SELECTION_BORDER_CLASS, TMP_SELECTION_BG_CLASS } from '../../../utils/consts';
export class OverlaySelection {
    constructor() {
        this.parent = '';
    }
    lastCellChanged(cell) {
        var _a;
        (_a = this.selectionStore) === null || _a === void 0 ? void 0 : _a.setLastCell(cell);
    }
    onDoubleClick() {
        this.canEdit() && this.selectionStoreConnector.setEdit('');
    }
    handleKeyDown(e) {
        this.selectionService.keyDown(e);
        if (this.selectionStore.edited) {
            switch (e.code) {
                case codesLetter.ESCAPE:
                    this.canEdit() && this.selectionStoreConnector.setEdit(false);
                    break;
            }
            return;
        }
        const isEnter = codesLetter.ENTER === e.code;
        if (isLetterKey(e.keyCode) || isEnter) {
            this.canEdit() && this.selectionStoreConnector.setEdit(!isEnter ? e.key : '');
        }
    }
    canEdit() {
        var _a;
        const editCell = this.selectionStore.focused;
        return editCell && !((_a = this.columnService) === null || _a === void 0 ? void 0 : _a.isReadOnly(editCell.y, editCell.x));
    }
    connectedCallback() {
        this.selectionStore = new SelectionStore(this.lastCell, this.position, this.selectionStoreConnector);
        this.selectionService = new CellSelectionService(`${this.parent} .${CELL_CLASS}`, {
            focus: (cell, isMulti) => {
                this.selectionStore.focus(cell, isMulti);
            },
            range: (start, end) => this.selectionStore.setRange(start, end),
            tempRange: (start, end) => this.selectionStore.setTempRange(start, end),
            change: (area, isMulti) => this.selectionStore.change(area, isMulti)
        });
    }
    disconnectedCallback() {
        this.selectionService.destroy();
        this.selectionStore.destroy();
    }
    componentDidRender() {
        var _a, _b;
        if (((_a = this.selectionStore) === null || _a === void 0 ? void 0 : _a.focused) && document.activeElement !== this.focusSection) {
            (_b = this.focusSection) === null || _b === void 0 ? void 0 : _b.focus({ preventScroll: true });
        }
    }
    render() {
        const range = this.selectionStore.store.get('range');
        const selectionFocus = this.selectionStore.store.get('focus');
        const tempRange = this.selectionStore.store.get('tempRange');
        const els = [];
        if (range) {
            const style = this.getElStyle(range);
            els.push(h("div", { class: SELECTION_BORDER_CLASS, style: style }), h("div", { class: SELECTION_BG_CLASS, style: style }));
        }
        if (tempRange) {
            const style = this.getElStyle(tempRange);
            els.push(h("div", { class: TMP_SELECTION_BG_CLASS, style: style }));
        }
        let focusStyle = {};
        if (selectionFocus) {
            focusStyle = this.getElStyle({
                x: selectionFocus.x,
                y: selectionFocus.y,
                x1: selectionFocus.x,
                y1: selectionFocus.y
            });
            els.push(h("div", { class: FOCUS_CLASS, style: focusStyle }));
        }
        els.push(h("input", { type: 'text', class: 'edit-focus-input', ref: el => this.focusSection = el, style: focusStyle }));
        if (!this.readonly) {
            const editCell = this.selectionStore.store.get('edit');
            els.push(h("revogr-edit", { onCloseEdit: () => this.selectionStoreConnector.setEdit(false), editCell: editCell && Object.assign(Object.assign({}, editCell), { val: editCell.val || this.columnService.getCellData(editCell.y, editCell.x) }), dimensionRow: this.dimensionRow, dimensionCol: this.dimensionCol }));
        }
        return els;
    }
    getElStyle(range) {
        const y = getItemByIndex(this.dimensionRow.state, range.y).start;
        const x = getItemByIndex(this.dimensionCol.state, range.x).start;
        const y1 = getItemByIndex(this.dimensionRow.state, range.y1).end;
        const x1 = getItemByIndex(this.dimensionCol.state, range.x1).end;
        return {
            left: `${x}px`,
            top: `${y}px`,
            width: `${x1 - x}px`,
            height: `${y1 - y}px`
        };
    }
    static get is() { return "revogr-overlay-selection"; }
    static get properties() { return {
        "selectionStoreConnector": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Selection.SelectionStoreConnectorI",
                "resolved": "SelectionStoreConnectorI",
                "references": {
                    "Selection": {
                        "location": "import",
                        "path": "../../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "readonly": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "readonly",
            "reflect": false
        },
        "parent": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "parent",
            "reflect": false,
            "defaultValue": "''"
        },
        "dimensionRow": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "ObservableMap<RevoGrid.DimensionSettingsState>",
                "resolved": "ObservableMap<DimensionSettingsState>",
                "references": {
                    "ObservableMap": {
                        "location": "import",
                        "path": "@stencil/store"
                    },
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "dimensionCol": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "ObservableMap<RevoGrid.DimensionSettingsState>",
                "resolved": "ObservableMap<DimensionSettingsState>",
                "references": {
                    "ObservableMap": {
                        "location": "import",
                        "path": "@stencil/store"
                    },
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "columnService": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "ColumnServiceI",
                "resolved": "ColumnServiceI",
                "references": {
                    "ColumnServiceI": {
                        "location": "import",
                        "path": "../../data/columnService"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "lastCell": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Selection.Cell",
                "resolved": "Cell",
                "references": {
                    "Selection": {
                        "location": "import",
                        "path": "../../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "position": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Selection.Cell",
                "resolved": "Cell",
                "references": {
                    "Selection": {
                        "location": "import",
                        "path": "../../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
    static get watchers() { return [{
            "propName": "lastCell",
            "methodName": "lastCellChanged"
        }]; }
    static get listeners() { return [{
            "name": "dblclick",
            "method": "onDoubleClick",
            "target": "parent",
            "capture": false,
            "passive": false
        }, {
            "name": "keydown",
            "method": "handleKeyDown",
            "target": "parent",
            "capture": false,
            "passive": false
        }]; }
}
