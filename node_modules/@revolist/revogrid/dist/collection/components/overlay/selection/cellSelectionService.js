import interact from 'interactjs';
import { getCell } from '../../../services/cell.helpers';
import { codesLetter } from '../../../utils/keyCodes';
export default class CellSelectionService {
    constructor(target, config) {
        this.target = target;
        this.config = config;
        interact(target)
            .draggable({
            listeners: {
                start: event => {
                    CellSelectionService.canRange &&
                        config.focus(getCell(event.currentTarget));
                }
            },
            cursorChecker: () => 'default'
        })
            .dropzone({
            ondrop: e => CellSelectionService.canRange &&
                config.range(getCell(e.currentTarget), getCell(e.relatedTarget)),
            ondragenter: e => CellSelectionService.canRange && config.tempRange(getCell(e.relatedTarget), getCell(e.currentTarget))
        })
            .on('tap', e => config.focus(getCell(e.currentTarget), CellSelectionService.canRange && e.shiftKey));
    }
    keyDown(e) {
        const isMulti = CellSelectionService.canRange && e.shiftKey;
        switch (e.code) {
            case codesLetter.ARROW_UP:
            case codesLetter.ARROW_DOWN:
            case codesLetter.ARROW_LEFT:
            case codesLetter.ARROW_RIGHT:
                e.preventDefault();
                break;
        }
        switch (e.code) {
            case codesLetter.ARROW_UP:
                this.config.change({ y: -1 }, isMulti);
                break;
            case codesLetter.ARROW_DOWN:
                this.config.change({ y: 1 }, isMulti);
                break;
            case codesLetter.ARROW_LEFT:
                this.config.change({ x: -1 }, isMulti);
                break;
            case codesLetter.ARROW_RIGHT:
                this.config.change({ x: 1 }, isMulti);
                break;
        }
    }
    destroy() {
        interact(this.target).unset();
    }
}
CellSelectionService.canRange = false;
