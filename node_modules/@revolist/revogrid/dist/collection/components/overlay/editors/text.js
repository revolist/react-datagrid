import { Component, Event, h, Prop } from '@stencil/core';
import { codesLetter } from '../../../utils/keyCodes';
export class TextEditor {
    componentDidRender() {
        if (this.editInput) {
            this.editInput.value = this.value;
            setTimeout(() => this.editInput.focus(), 0);
        }
    }
    render() {
        return h("input", { type: 'text', ref: (el) => { this.editInput = el; }, onKeyDown: (e) => this.onKeyDown(e) });
    }
    onKeyDown(e) {
        const isEnter = codesLetter.ENTER === e.code;
        if (isEnter && e.target) {
            this.edit.emit(e.target.value);
        }
    }
    static get is() { return "revogr-text-editor"; }
    static get properties() { return {
        "value": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "value",
            "reflect": false
        }
    }; }
    static get events() { return [{
            "method": "edit",
            "name": "edit",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "Edition.SaveData",
                "resolved": "string",
                "references": {
                    "Edition": {
                        "location": "import",
                        "path": "../../../interfaces"
                    }
                }
            }
        }]; }
}
