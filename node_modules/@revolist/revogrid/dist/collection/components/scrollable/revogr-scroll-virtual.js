import { Component, Element, Event, h, Host, Method, Prop } from '@stencil/core';
import { getScrollbarWidth } from '../../utils/utils';
import LocalScrollService from '../../services/localScrollService';
export class RevogrScrollVirtual {
    constructor() {
        this.scrollSize = 0;
        this.dimension = 'row';
        this.contentSize = 0;
        this.virtualSize = 0;
    }
    async setScroll(e) {
        var _a;
        if (this.dimension !== e.dimension) {
            return;
        }
        (_a = this.scrollService) === null || _a === void 0 ? void 0 : _a.setScroll(e);
    }
    get extContentSize() {
        return LocalScrollService.getVirtualContentSize(this.contentSize, this.size, this.virtualSize);
    }
    set size(s) {
        if (this.dimension === 'row') {
            this.element.style.minWidth = `${s}px`;
            return;
        }
        this.element.style.minHeight = `${s}px`;
    }
    get size() {
        if (this.dimension === 'row') {
            return this.element.clientHeight;
        }
        return this.element.clientWidth;
    }
    connectedCallback() {
        this.scrollService = new LocalScrollService({
            beforeScroll: e => this.scrollVirtual.emit(e),
            afterScroll: e => {
                const type = e.dimension === 'row' ? 'scrollTop' : 'scrollLeft';
                this.element[type] = e.coordinate;
            }
        });
    }
    componentWillLoad() {
        this.scrollSize = getScrollbarWidth(document);
    }
    componentDidRender() {
        const type = this.dimension === 'row' ? 'scrollHeight' : 'scrollWidth';
        if (this.element[type] > this.size) {
            this.size = this.scrollSize;
        }
        else {
            this.size = 0;
        }
        this.scrollService.setParams({
            contentSize: this.contentSize,
            clientSize: this.size,
            virtualSize: this.virtualSize
        }, this.dimension);
    }
    render() {
        const sizeType = this.dimension === 'row' ? 'height' : 'width';
        return h(Host, { onScroll: (e) => {
                var _a;
                const type = this.dimension === 'row' ? 'scrollTop' : 'scrollLeft';
                const target = e.target;
                (_a = this.scrollService) === null || _a === void 0 ? void 0 : _a.scroll(target[type] || 0, this.dimension);
            } },
            h("div", { style: { [sizeType]: `${this.extContentSize}px` } }));
    }
    static get is() { return "revogr-scroll-virtual"; }
    static get properties() { return {
        "dimension": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "RevoGrid.DimensionType",
                "resolved": "\"col\" | \"row\"",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "dimension",
            "reflect": false,
            "defaultValue": "'row'"
        },
        "contentSize": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "content-size",
            "reflect": false,
            "defaultValue": "0"
        },
        "virtualSize": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "virtual-size",
            "reflect": false,
            "defaultValue": "0"
        }
    }; }
    static get events() { return [{
            "method": "scrollVirtual",
            "name": "scrollVirtual",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "RevoGrid.ViewPortScrollEvent",
                "resolved": "{ dimension: DimensionType; coordinate: number; }",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            }
        }]; }
    static get methods() { return {
        "setScroll": {
            "complexType": {
                "signature": "(e: RevoGrid.ViewPortScrollEvent) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    },
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "element"; }
}
