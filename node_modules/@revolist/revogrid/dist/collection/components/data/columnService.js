import { h } from '@stencil/core';
export default class ColumnService {
    constructor(dataStore, columns) {
        this.dataStore = dataStore;
        this.source = [];
        this.source = columns;
    }
    get columns() {
        return this.source;
    }
    set columns(source) {
        this.source = source;
    }
    isReadOnly(r, c) {
        var _a;
        const readOnly = (_a = this.columns[c]) === null || _a === void 0 ? void 0 : _a.readonly;
        if (typeof readOnly === 'function') {
            return readOnly(r, c);
        }
        return readOnly;
    }
    cellRenderer(r, c) {
        var _a;
        const tpl = (_a = this.columns[c]) === null || _a === void 0 ? void 0 : _a.cellTemplate;
        if (tpl) {
            return tpl(h, this.rowDataModel(r, c));
        }
        return this.getCellData(r, c);
    }
    setCellData(r, c, val) {
        const { data, model, prop } = this.rowDataModel(r, c);
        model[prop] = val;
        this.dataStore.set('items', [...data]);
    }
    getCellData(r, c) {
        const { prop, model } = this.rowDataModel(r, c);
        return model[prop] || '';
    }
    getSaveData(r, c, val) {
        const { prop, model } = this.rowDataModel(r, c);
        return {
            prop,
            model,
            val
        };
    }
    rowDataModel(r, c) {
        var _a;
        const prop = (_a = this.columns[c]) === null || _a === void 0 ? void 0 : _a.prop;
        const data = this.dataStore.get('items');
        const model = data[r] || {};
        return { prop, model, data };
    }
}
