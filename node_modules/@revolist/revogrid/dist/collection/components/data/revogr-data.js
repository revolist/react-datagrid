import { Component, Element, Event, h, Host, Listen, Prop, State, Watch } from '@stencil/core';
import ColumnService from './columnService';
import { CELL_CLASS, DATA_COL, DATA_ROW, DISABLED_CLASS, UUID } from '../../utils/consts';
export class RevogrData {
    constructor() {
        this.uuid = '';
    }
    colChanged(newData) {
        this.columnService.columns = newData;
    }
    onSave(e) {
        e.cancelBubble = true;
        const dataToSave = this.columnService.getSaveData(e.detail.row, e.detail.col, e.detail.val);
        const beforeEdit = this.beforeEdit.emit(dataToSave);
        // apply data
        setTimeout(() => {
            if (!beforeEdit.defaultPrevented) {
                this.columnService.setCellData(e.detail.row, e.detail.col, e.detail.val);
                this.afterEdit.emit(dataToSave);
            }
        });
    }
    connectedCallback() {
        this.columnService = new ColumnService(this.dataStore, this.colData);
    }
    render() {
        if (!this.colData || !this.rows.length || !this.cols.length) {
            return '';
        }
        const rowsEls = [];
        for (let row of this.rows) {
            const cells = [];
            for (let col of this.cols) {
                const dataProps = {
                    [DATA_COL]: col.itemIndex,
                    [DATA_ROW]: row.itemIndex,
                    class: `${CELL_CLASS} ${this.columnService.isReadOnly(row.itemIndex, col.itemIndex) ? DISABLED_CLASS : ''}`,
                    style: { width: `${col.size}px`, transform: `translateX(${col.start}px)` }
                };
                cells.push(h("div", Object.assign({}, dataProps), this.columnService.cellRenderer(row.itemIndex, col.itemIndex)));
            }
            rowsEls.push(h("div", { class: 'row', style: { height: `${row.size}px`, transform: `translateY(${row.start}px)` } }, cells));
        }
        const uuid = `${this.uuid}-${this.position.x}-${this.position.y}`;
        const parent = `[${UUID}="${uuid}"]`;
        const hostProp = { [`${UUID}`]: uuid };
        if (!this.readonly || this.range) {
            rowsEls.push(h("revogr-overlay-selection", { slot: 'content', selectionStoreConnector: this.selectionStoreConnector, readonly: this.readonly, columnService: this.columnService, dimensionCol: this.dimensionCol, dimensionRow: this.dimensionRow, lastCell: this.lastCell, position: this.position, parent: parent }));
        }
        return h(Host, Object.assign({}, hostProp), rowsEls);
    }
    static get is() { return "revogr-data"; }
    static get properties() { return {
        "dataStore": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "ObservableMap<DataSourceState<RevoGrid.DataType>>",
                "resolved": "ObservableMap<DataSourceState<DataType>>",
                "references": {
                    "ObservableMap": {
                        "location": "import",
                        "path": "@stencil/store"
                    },
                    "DataSourceState": {
                        "location": "import",
                        "path": "../../store/dataSource/data.store"
                    },
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "selectionStoreConnector": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Selection.SelectionStoreConnectorI",
                "resolved": "SelectionStoreConnectorI",
                "references": {
                    "Selection": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "dimensionRow": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "ObservableMap<RevoGrid.DimensionSettingsState>",
                "resolved": "ObservableMap<DimensionSettingsState>",
                "references": {
                    "ObservableMap": {
                        "location": "import",
                        "path": "@stencil/store"
                    },
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "dimensionCol": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "ObservableMap<RevoGrid.DimensionSettingsState>",
                "resolved": "ObservableMap<DimensionSettingsState>",
                "references": {
                    "ObservableMap": {
                        "location": "import",
                        "path": "@stencil/store"
                    },
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "readonly": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "readonly",
            "reflect": false
        },
        "range": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "range",
            "reflect": false
        },
        "rows": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "RevoGrid.VirtualPositionItem[]",
                "resolved": "VirtualPositionItem[]",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "cols": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "RevoGrid.VirtualPositionItem[]",
                "resolved": "VirtualPositionItem[]",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "lastCell": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Selection.Cell",
                "resolved": "Cell",
                "references": {
                    "Selection": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "position": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Selection.Cell",
                "resolved": "Cell",
                "references": {
                    "Selection": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "uuid": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "uuid",
            "reflect": false,
            "defaultValue": "''"
        },
        "colData": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "RevoGrid.ColumnDataSchemaRegular[]",
                "resolved": "ColumnDataSchemaRegular[]",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
    static get states() { return {
        "columnService": {}
    }; }
    static get events() { return [{
            "method": "afterEdit",
            "name": "afterEdit",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "Edition.BeforeSaveDataDetails",
                "resolved": "{ model: DataType; prop: ColumnProp; val: string; }",
                "references": {
                    "Edition": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            }
        }, {
            "method": "beforeEdit",
            "name": "beforeEdit",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "Edition.BeforeSaveDataDetails",
                "resolved": "{ model: DataType; prop: ColumnProp; val: string; }",
                "references": {
                    "Edition": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            }
        }]; }
    static get elementRef() { return "element"; }
    static get watchers() { return [{
            "propName": "colData",
            "methodName": "colChanged"
        }]; }
    static get listeners() { return [{
            "name": "cellEdit",
            "method": "onSave",
            "target": undefined,
            "capture": false,
            "passive": false
        }]; }
}
