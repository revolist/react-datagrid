import { Component, Event, h, Method, Element, Prop } from '@stencil/core';
import each from 'lodash/each';
import GridResizeService from './gridResizeService';
import LocalScrollService from "../../services/localScrollService";
export class RevogrViewportScroll {
    constructor() {
        this.contentWidth = 0;
        this.contentHeight = 0;
        this.oldValY = this.contentHeight;
        this.oldValX = this.contentWidth;
    }
    async setScroll(e) {
        var _a;
        (_a = this.scrollService) === null || _a === void 0 ? void 0 : _a.setScroll(e);
    }
    connectedCallback() {
        this.scrollService = new LocalScrollService({
            beforeScroll: e => this.scrollViewport.emit(e),
            afterScroll: e => {
                switch (e.dimension) {
                    case 'col':
                        this.horizontalScroll.scrollLeft = e.coordinate;
                        break;
                    case 'row':
                        this.verticalScroll.scrollTop = e.coordinate;
                        break;
                }
            }
        });
    }
    componentDidLoad() {
        this.verticalMouseWheel = (e) => {
            var _a;
            e.preventDefault();
            (_a = this.scrollService) === null || _a === void 0 ? void 0 : _a.scroll(this.verticalScroll.scrollTop + e.deltaY, 'row');
        };
        this.horizontalMouseWheel = (e) => {
            var _a;
            e.preventDefault();
            (_a = this.scrollService) === null || _a === void 0 ? void 0 : _a.scroll(this.horizontalScroll.scrollLeft + e.deltaX, 'col');
        };
        this.gridResizeService = new GridResizeService(this.horizontalScroll, {
            resize: () => {
                const els = { row: this.verticalScroll.clientHeight, col: this.horizontalScroll.clientWidth };
                each(els, (size, dimension) => {
                    var _a;
                    this.resizeViewport.emit({ dimension, size });
                    (_a = this.scrollService) === null || _a === void 0 ? void 0 : _a.scroll(0, dimension, true);
                });
            }
        });
        this.verticalScroll.addEventListener('mousewheel', this.verticalMouseWheel);
        this.horizontalScroll.addEventListener('mousewheel', this.horizontalMouseWheel);
    }
    disconnectedCallback() {
        this.verticalScroll.removeEventListener('mousewheel', this.verticalMouseWheel);
        this.horizontalScroll.removeEventListener('mousewheel', this.horizontalMouseWheel);
        this.gridResizeService.destroy();
    }
    async componentDidRender() {
        // scroll update if number of rows changed
        if (this.contentHeight < this.oldValY && this.verticalScroll) {
            this.verticalScroll.scrollTop += this.contentHeight - this.oldValY;
        }
        this.oldValY = this.contentHeight;
        // scroll update if number of cols changed
        if (this.contentWidth < this.oldValX) {
            this.horizontalScroll.scrollLeft += this.contentWidth - this.oldValX;
        }
        this.oldValX = this.contentWidth;
        this.scrollService.setParams({
            contentSize: this.contentHeight,
            clientSize: this.verticalScroll.clientHeight,
            virtualSize: 0
        }, 'row');
        this.scrollService.setParams({
            contentSize: this.contentWidth,
            clientSize: this.horizontalScroll.clientWidth,
            virtualSize: 0
        }, 'col');
    }
    render() {
        return h("div", { class: 'inner-content-table', style: { width: `${this.contentWidth}px` } },
            h("div", { class: 'header-wrapper' },
                h("slot", { name: 'header' })),
            h("div", { class: 'vertical-inner', ref: el => { this.verticalScroll = el; } },
                h("div", { class: 'content-wrapper', style: { height: `${this.contentHeight}px`, } },
                    h("slot", { name: 'content' }))),
            h("div", { class: 'footer-wrapper' },
                h("slot", { name: 'footer' })));
    }
    static get is() { return "revogr-viewport-scroll"; }
    static get properties() { return {
        "contentWidth": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "content-width",
            "reflect": false,
            "defaultValue": "0"
        },
        "contentHeight": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "content-height",
            "reflect": false,
            "defaultValue": "0"
        }
    }; }
    static get events() { return [{
            "method": "scrollViewport",
            "name": "scrollViewport",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "RevoGrid.ViewPortScrollEvent",
                "resolved": "{ dimension: DimensionType; coordinate: number; }",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            }
        }, {
            "method": "resizeViewport",
            "name": "resizeViewport",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "RevoGrid.ViewPortResizeEvent",
                "resolved": "{ dimension: DimensionType; size: number; }",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            }
        }]; }
    static get methods() { return {
        "setScroll": {
            "complexType": {
                "signature": "(e: RevoGrid.ViewPortScrollEvent) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    },
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "horizontalScroll"; }
}
