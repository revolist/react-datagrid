import { Component, Prop, h, Host, Watch, Listen, Element, Event } from '@stencil/core';
import '../../utils/closestPolifill';
import { UUID } from '../../utils/consts';
import GridScrollingService from './gridScrollingService';
import CellSelectionService from '../overlay/selection/cellSelectionService';
import SelectionStoreConnector from "../../services/selection.store.connector";
/**
 * Renders viewport
 * @Component
 * @Prop uuid - grid id
 * @Prop resize - can resize grid
 * @Prop readonly - can edit grid
 * @Prop range - can change range
 * */
export class RevogrViewport {
    constructor() {
        this.elementToScroll = [];
        this.uuid = null;
    }
    onRange(canRange) {
        CellSelectionService.canRange = canRange;
    }
    /** Clear data which is outside of grid container */
    handleOutsideClick(e) {
        const target = e.target;
        if (!(target === null || target === void 0 ? void 0 : target.closest(`[${UUID}="${this.uuid}"]`))) {
            this.selectionStoreConnector.clearAll();
        }
    }
    connectedCallback() {
        this.selectionStoreConnector = new SelectionStoreConnector();
        this.scrollingService = new GridScrollingService({
            setViewport: (e) => this.setViewportCoordinate.emit(e)
        });
        CellSelectionService.canRange = this.range;
    }
    disconnectedCallback() {
        this.scrollingService.destroy();
    }
    componentDidRender() {
        this.scrollingService.registerElements(this.elementToScroll);
    }
    render() {
        this.elementToScroll.length = 0;
        const rows = this.viewports['row'].get('items');
        const cols = this.viewports['col'].get('items');
        const contentHeight = this.dimensions['row'].get('realSize');
        const viewports = [
            // left side
            this.pinnedColumnData('colPinStart', `${this.uuid}-1`, rows, 'colPinStart', { x: 0, y: 1 }, contentHeight),
            // center
            this.centerData('data-view', `${this.uuid}-0`, rows, cols, { x: 1, y: 1 }, contentHeight),
            // right side
            this.pinnedColumnData('colPinEnd', `${this.uuid}-2`, rows, 'colPinEnd', { x: 2, y: 1 }, contentHeight)
        ];
        const viewPortHtml = [];
        /** render viewports columns */
        for (let view of viewports) {
            const dataViews = [];
            let j = 0;
            /** render viewports rows */
            for (let data of view.dataPorts) {
                dataViews.push(h("revogr-data", Object.assign({}, data, { selectionStoreConnector: this.selectionStoreConnector, key: view.prop.key + (++j), readonly: this.readonly, range: this.range })));
            }
            viewPortHtml.push(h("revogr-viewport-scroll", Object.assign({}, view.prop, { ref: el => this.elementToScroll.push(el), onScrollViewport: e => this.scrollingService.onScroll(e.detail, view.prop.key) }),
                h("revogr-header", Object.assign({}, view.headerProp, { slot: 'header', canResize: this.resize })),
                dataViews));
        }
        return h(Host, Object.assign({}, { [`${UUID}`]: this.uuid }),
            h("div", { class: 'main-viewport' },
                h("div", { class: 'viewports' },
                    viewPortHtml,
                    h("revogr-scroll-virtual", { class: 'vertical', contentSize: contentHeight, ref: el => this.elementToScroll.push(el), virtualSize: this.viewports['row'].get('virtualSize'), onScrollVirtual: e => this.scrollingService.onScroll(e.detail) }))),
            h("revogr-scroll-virtual", { class: 'horizontal', dimension: 'col', contentSize: this.dimensions['col'].get('realSize'), ref: el => this.elementToScroll.push(el), virtualSize: this.viewports['col'].get('virtualSize'), onScrollVirtual: e => this.scrollingService.onScroll(e.detail) }));
    }
    /** Collect data for pinned columns in required @ViewportProps format */
    pinnedColumnData(key, uuid, rows, colType, position, contentHeight) {
        const colStore = this.columnStores[colType];
        const cols = this.viewports[colType].get('items');
        const pinSize = this.dimensions[colType].get('realSize');
        const parent = `[${UUID}="${uuid}"]`;
        const prop = {
            contentWidth: pinSize,
            style: { minWidth: `${pinSize}px` },
            class: key,
            [`${UUID}`]: uuid,
            contentHeight,
            key,
        };
        const colData = colStore.get('items');
        const headerProp = {
            cols,
            parent,
            colData,
            dimensionCol: this.dimensions[colType],
            groups: colStore.get('groups'),
            groupingDepth: colStore.get('groupingDepth'),
            onHeaderResize: (e) => this.setDimensionSize.emit({
                type: colType,
                sizes: e.detail
            })
        };
        return {
            prop,
            headerProp,
            parent,
            dataPorts: this.dataViewPort(rows, cols, colData, colType, position, uuid)
        };
    }
    ;
    /** Collect data for central(core) part */
    centerData(key, uuid, rows, cols, position, contentHeight, colType = 'col') {
        const parent = `[${UUID}="${uuid}"]`;
        const colStore = this.columnStores[colType];
        const prop = {
            contentWidth: this.dimensions[colType].get('realSize'),
            class: key,
            [`${UUID}`]: uuid,
            onResizeViewport: (e) => this.setViewportSize.emit(e.detail),
            contentHeight,
            key
        };
        const colData = colStore.get('items');
        const headerProp = {
            colData,
            cols,
            parent,
            dimensionCol: this.dimensions[colType],
            groups: colStore.get('groups'),
            groupingDepth: colStore.get('groupingDepth'),
            onHeaderResize: (e) => this.setDimensionSize.emit({ type: colType, sizes: e.detail })
        };
        return {
            prop,
            headerProp,
            parent,
            dataPorts: this.dataViewPort(rows, cols, colData, colType, position, uuid)
        };
    }
    /** Collect Row data */
    dataViewPort(rows, cols, colData, colType, position, uuid) {
        const dataPart = {
            colData,
            position,
            cols,
            rows,
            uuid,
            lastCell: this.getLastCell(colType, 'row'),
            dataStore: this.rowStores['row'],
            slot: 'content',
            dimensionCol: this.dimensions[colType],
            dimensionRow: this.dimensions['row']
        };
        const pinned = (type, slot, y) => {
            return Object.assign(Object.assign({}, dataPart), { slot, dataStore: this.rowStores[type], rows: this.viewports[type].get('items'), dimensionRow: this.dimensions[type], lastCell: this.getLastCell(colType, type), position: Object.assign(Object.assign({}, position), { y }), style: { height: `${this.dimensions[type].get('realSize')}px` } });
        };
        return [
            pinned('rowPinStart', 'header', 0),
            dataPart,
            pinned('rowPinEnd', 'footer', dataPart.position.y + 1)
        ];
    }
    /** Receive last visible in viewport by required type */
    getLastCell(colType, rowType) {
        return {
            x: this.viewports[colType].get('realCount'),
            y: this.viewports[rowType].get('realCount')
        };
    }
    static get is() { return "revogr-viewport"; }
    static get properties() { return {
        "columnStores": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "{[T in RevoGrid.DimensionCols]: ObservableMap<DataSourceState<RevoGrid.ColumnDataSchemaRegular>>}",
                "resolved": "{ col: ObservableMap<DataSourceState<ColumnDataSchemaRegular>>; colPinStart: ObservableMap<DataSourceState<ColumnDataSchemaRegular>>; colPinEnd: ObservableMap<DataSourceState<ColumnDataSchemaRegular>>; }",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    },
                    "ObservableMap": {
                        "location": "import",
                        "path": "@stencil/store"
                    },
                    "DataSourceState": {
                        "location": "import",
                        "path": "../../store/dataSource/data.store"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "rowStores": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "{[T in RevoGrid.DimensionRows]: ObservableMap<DataSourceState<RevoGrid.DataType>>}",
                "resolved": "{ row: ObservableMap<DataSourceState<DataType>>; rowPinStart: ObservableMap<DataSourceState<DataType>>; rowPinEnd: ObservableMap<DataSourceState<DataType>>; }",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    },
                    "ObservableMap": {
                        "location": "import",
                        "path": "@stencil/store"
                    },
                    "DataSourceState": {
                        "location": "import",
                        "path": "../../store/dataSource/data.store"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "dimensions": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "{[T in RevoGrid.MultiDimensionType]: ObservableMap<RevoGrid.DimensionSettingsState>}",
                "resolved": "{ col: ObservableMap<DimensionSettingsState>; row: ObservableMap<DimensionSettingsState>; colPinStart: ObservableMap<DimensionSettingsState>; colPinEnd: ObservableMap<DimensionSettingsState>; rowPinStart: ObservableMap<DimensionSettingsState>; rowPinEnd: ObservableMap<DimensionSettingsState>; }",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    },
                    "ObservableMap": {
                        "location": "import",
                        "path": "@stencil/store"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "viewports": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "{[T in RevoGrid.MultiDimensionType]: ObservableMap<RevoGrid.ViewportState>}",
                "resolved": "{ col: ObservableMap<ViewportState>; row: ObservableMap<ViewportState>; colPinStart: ObservableMap<ViewportState>; colPinEnd: ObservableMap<ViewportState>; rowPinStart: ObservableMap<ViewportState>; rowPinEnd: ObservableMap<ViewportState>; }",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    },
                    "ObservableMap": {
                        "location": "import",
                        "path": "@stencil/store"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "dataProvider": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "DataProvider",
                "resolved": "DataProvider",
                "references": {
                    "DataProvider": {
                        "location": "import",
                        "path": "../../services/data.provider"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "uuid": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string|null",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "uuid",
            "reflect": false,
            "defaultValue": "null"
        },
        "resize": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "resize",
            "reflect": false
        },
        "readonly": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "readonly",
            "reflect": false
        },
        "range": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "range",
            "reflect": false
        }
    }; }
    static get events() { return [{
            "method": "setDimensionSize",
            "name": "setDimensionSize",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "{type: RevoGrid.MultiDimensionType, sizes: RevoGrid.ViewSettingSizeProp}",
                "resolved": "{ type: MultiDimensionType; sizes: ViewSettingSizeProp; }",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            }
        }, {
            "method": "setViewportCoordinate",
            "name": "setViewportCoordinate",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "RevoGrid.ViewPortScrollEvent",
                "resolved": "{ dimension: DimensionType; coordinate: number; }",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            }
        }, {
            "method": "setViewportSize",
            "name": "setViewportSize",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "RevoGrid.ViewPortResizeEvent",
                "resolved": "{ dimension: DimensionType; size: number; }",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            }
        }]; }
    static get elementRef() { return "element"; }
    static get watchers() { return [{
            "propName": "range",
            "methodName": "onRange"
        }]; }
    static get listeners() { return [{
            "name": "click",
            "method": "handleOutsideClick",
            "target": "document",
            "capture": false,
            "passive": false
        }]; }
}
