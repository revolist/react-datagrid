import { Component, Element, Event, h, Prop, Watch } from '@stencil/core';
import findIndex from 'lodash/findIndex';
import { DATA_COL, HEADER_CLASS } from '../../utils/consts';
import HeaderService from './headerService';
import { getItemByIndex } from '../../store/dimension/dimension.helpers';
export class RevogrHeaderComponent {
    constructor() {
        this.parent = '';
        this.groupingDepth = 0;
    }
    onResizeChanged(newVal) {
        this.headerService.resizeChange(newVal);
    }
    colChanged(newData) {
        this.headerService.columns = newData;
    }
    connectedCallback() {
        this.headerService = new HeaderService(`${this.parent} .${HEADER_CLASS}`, this.colData, {
            canResize: this.canResize,
            resize: (sizes) => this.headerResize.emit(sizes)
        });
    }
    disconnectedCallback() {
        var _a;
        (_a = this.headerService) === null || _a === void 0 ? void 0 : _a.destroy();
    }
    render() {
        const cells = [];
        const visibleProps = {};
        // render header columns
        for (let col of this.cols) {
            const colData = this.colData[col.itemIndex];
            const dataProps = {
                [DATA_COL]: col.itemIndex,
                class: HEADER_CLASS,
                style: { width: `${col.size}px`, transform: `translateX(${col.start}px)` },
                onClick: () => this.headerClick.emit(this.colData[col.itemIndex])
            };
            cells.push(h("div", Object.assign({}, dataProps), colData.name));
            visibleProps[colData.prop] = col.itemIndex;
        }
        // render group columns
        const groupRow = [];
        for (let i = 0; i < this.groupingDepth; i++) {
            if (this.groups[i]) {
                for (let group of this.groups[i]) {
                    // if group in visible range
                    // find first visible group prop in visible columns range
                    const indexFirstVisibleCol = findIndex(group.ids, (id) => typeof visibleProps[id] === 'number');
                    if (indexFirstVisibleCol > -1) {
                        const colVisibleIndex = visibleProps[group.ids[indexFirstVisibleCol]]; // get column index
                        const groupStartIndex = colVisibleIndex - indexFirstVisibleCol; // first column index in group
                        const groupEndIndex = groupStartIndex + group.ids.length - 1; // last column index in group
                        // coordinates
                        const groupStart = getItemByIndex(this.dimensionCol.state, groupStartIndex).start;
                        const groupEnd = getItemByIndex(this.dimensionCol.state, groupEndIndex).end;
                        const groupProps = {
                            class: HEADER_CLASS,
                            style: {
                                transform: `translateX(${groupStart}px)`,
                                width: `${groupEnd - groupStart}px`
                            }
                        };
                        groupRow.push(h("div", Object.assign({}, groupProps), group.name));
                    }
                }
            }
            groupRow.push(h("div", { class: 'header-row group' }));
        }
        return [
            h("div", { class: 'group-row' }, groupRow),
            h("div", { class: 'header-row' }, cells)
        ];
    }
    static get is() { return "revogr-header"; }
    static get properties() { return {
        "cols": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "RevoGrid.VirtualPositionItem[]",
                "resolved": "VirtualPositionItem[]",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "dimensionCol": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "ObservableMap<RevoGrid.DimensionSettingsState>",
                "resolved": "ObservableMap<DimensionSettingsState>",
                "references": {
                    "ObservableMap": {
                        "location": "import",
                        "path": "@stencil/store"
                    },
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "parent": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "parent",
            "reflect": false,
            "defaultValue": "''"
        },
        "groups": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Groups",
                "resolved": "{ [level: number]: Group[]; }",
                "references": {
                    "Groups": {
                        "location": "import",
                        "path": "../../store/dataSource/data.store"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "groupingDepth": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "grouping-depth",
            "reflect": false,
            "defaultValue": "0"
        },
        "canResize": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "can-resize",
            "reflect": false
        },
        "colData": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "RevoGrid.ColumnDataSchemaRegular[]",
                "resolved": "ColumnDataSchemaRegular[]",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
    static get events() { return [{
            "method": "headerClick",
            "name": "headerClick",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "RevoGrid.ColumnDataSchemaRegular",
                "resolved": "ColumnDataSchemaRegular",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            }
        }, {
            "method": "headerResize",
            "name": "headerResize",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "RevoGrid.ViewSettingSizeProp",
                "resolved": "{ [index: string]: number; }",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            }
        }]; }
    static get elementRef() { return "element"; }
    static get watchers() { return [{
            "propName": "canResize",
            "methodName": "onResizeChanged"
        }, {
            "propName": "colData",
            "methodName": "colChanged"
        }]; }
}
