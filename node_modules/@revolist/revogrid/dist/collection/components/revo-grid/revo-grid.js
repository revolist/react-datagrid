import { Component, Prop, h, Watch, Element, State } from '@stencil/core';
import reduce from 'lodash/reduce';
import initialSettings from '../../utils/initialSettings';
import ColumnDataProvider from '../../services/column.data.provider';
import { DataProvider } from '../../services/data.provider';
import DimensionProvider from '../../services/dimension.provider';
import ViewportProvider from "../../services/viewport.provider";
export class RevoGridComponent {
    constructor() {
        // --------------------------------------------------------------------------
        //
        //  Properties
        //
        // --------------------------------------------------------------------------
        /**
         * Defines how many rows/columns should be rendered outside visible area.
         */
        this.frameSize = initialSettings.frameSize;
        /**
         * Indicates default row size.
         */
        this.rowSize = initialSettings.defaultRowSize;
        /**
         * Indicates default column size.
         */
        this.colSize = initialSettings.defaultColumnSize;
        /**
         * When true, user can range selection.
         */
        this.range = initialSettings.range;
        /**
         * When true, grid in read only mode.
         */
        this.readonly = initialSettings.readonly;
        /**
         * When true, columns are resizable.
         */
        this.resize = initialSettings.resize;
        /**
         * Columns - defines an array of grid columns. Can be column or grouped column.
         */
        this.columns = [];
        /**
         * Source: {[T in ColumnProp]: any} - defines main data source.
         * Can be an Object or 2 dimensional array([][]);
         * ColumnProp - string|number. It is reference for column mapping.
         */
        this.source = [];
        /**
         * Pinned top Source: {[T in ColumnProp]: any} - defines pinned top rows data source.
         */
        this.pinnedTopSource = [];
        /**
         * Pinned bottom Source: {[T in ColumnProp]: any} - defines pinned bottom rows data source.
         */
        this.pinnedBottomSource = [];
        // --------------------------------------------------------------------------
        //
        //  Private Properties
        //
        // --------------------------------------------------------------------------
        this.uuid = null;
    }
    columnChanged(newVal) {
        this.columnProvider.setColumns(newVal);
    }
    dataChanged(newVal) {
        this.dataProvider.setData(newVal, 'row');
    }
    dataBottomChanged(newVal) {
        this.dataProvider.setData(newVal, 'rowPinEnd');
    }
    dataTopChanged(newVal) {
        this.dataProvider.setData(newVal, 'rowPinStart');
    }
    get columnStores() {
        return reduce(this.columnProvider.stores, (res, dataSource, k) => {
            res[k] = dataSource.store;
            return res;
        }, {});
    }
    get rowStores() {
        return reduce(this.dataProvider.stores, (res, dataSource, k) => {
            res[k] = dataSource.store;
            return res;
        }, {});
    }
    get dimensionStores() {
        return reduce(this.dimensionProvider.stores, (res, dataSource, k) => {
            res[k] = dataSource.store;
            return res;
        }, {});
    }
    get viewportStores() {
        return reduce(this.viewportProvider.stores, (res, dataSource, k) => {
            res[k] = dataSource.store;
            return res;
        }, {});
    }
    connectedCallback() {
        this.viewportProvider = new ViewportProvider();
        this.dimensionProvider = new DimensionProvider(this.viewportProvider);
        this.columnProvider = new ColumnDataProvider(this.dimensionProvider);
        this.dataProvider = new DataProvider(this.dimensionProvider);
        this.uuid = (new Date()).getTime().toString();
        this.dimensionProvider.setSettings({
            originItemSize: this.rowSize,
            frameOffset: this.frameSize || initialSettings.frameSize
        }, 'row');
        this.dimensionProvider.setSettings({
            originItemSize: this.colSize,
            frameOffset: this.frameSize || initialSettings.frameSize
        }, 'col');
        this.columnChanged(this.columns);
        this.dataChanged(this.source);
        this.dataTopChanged(this.pinnedTopSource);
        this.dataBottomChanged(this.pinnedBottomSource);
    }
    render() {
        return h("revogr-viewport", { onSetDimensionSize: e => this.dimensionProvider.setDimensionSize(e.detail.type, e.detail.sizes), onSetViewportCoordinate: e => this.dimensionProvider.setViewPortCoordinate(e.detail), onSetViewportSize: e => this.viewportProvider.setViewport(e.detail.dimension, { virtualSize: e.detail.size }), columnStores: this.columnStores, dimensions: this.dimensionStores, viewports: this.viewportStores, rowStores: this.rowStores, dataProvider: this.dataProvider, uuid: this.uuid, resize: this.resize, readonly: this.readonly, range: this.range });
    }
    static get is() { return "revo-grid"; }
    static get originalStyleUrls() { return {
        "$": ["revo-grid.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["revo-grid.css"]
    }; }
    static get properties() { return {
        "frameSize": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines how many rows/columns should be rendered outside visible area."
            },
            "attribute": "frame-size",
            "reflect": false,
            "defaultValue": "initialSettings.frameSize"
        },
        "rowSize": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates default row size."
            },
            "attribute": "row-size",
            "reflect": false,
            "defaultValue": "initialSettings.defaultRowSize"
        },
        "colSize": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates default column size."
            },
            "attribute": "col-size",
            "reflect": false,
            "defaultValue": "initialSettings.defaultColumnSize"
        },
        "range": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "When true, user can range selection."
            },
            "attribute": "range",
            "reflect": false,
            "defaultValue": "initialSettings.range"
        },
        "readonly": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "When true, grid in read only mode."
            },
            "attribute": "readonly",
            "reflect": false,
            "defaultValue": "initialSettings.readonly"
        },
        "resize": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "When true, columns are resizable."
            },
            "attribute": "resize",
            "reflect": false,
            "defaultValue": "initialSettings.resize"
        },
        "columns": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(RevoGrid.ColumnDataSchemaRegular|RevoGrid.ColumnDataSchemaGrouping)[]",
                "resolved": "(ColumnDataSchemaRegular | ColumnDataSchemaGrouping)[]",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Columns - defines an array of grid columns. Can be column or grouped column."
            },
            "defaultValue": "[]"
        },
        "source": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "RevoGrid.DataType[]",
                "resolved": "DataType[]",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Source: {[T in ColumnProp]: any} - defines main data source.\nCan be an Object or 2 dimensional array([][]);\nColumnProp - string|number. It is reference for column mapping."
            },
            "defaultValue": "[]"
        },
        "pinnedTopSource": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "RevoGrid.DataType[]",
                "resolved": "DataType[]",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Pinned top Source: {[T in ColumnProp]: any} - defines pinned top rows data source."
            },
            "defaultValue": "[]"
        },
        "pinnedBottomSource": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "RevoGrid.DataType[]",
                "resolved": "DataType[]",
                "references": {
                    "RevoGrid": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Pinned bottom Source: {[T in ColumnProp]: any} - defines pinned bottom rows data source."
            },
            "defaultValue": "[]"
        }
    }; }
    static get states() { return {
        "uuid": {},
        "columnProvider": {},
        "dataProvider": {},
        "dimensionProvider": {},
        "viewportProvider": {}
    }; }
    static get elementRef() { return "element"; }
    static get watchers() { return [{
            "propName": "columns",
            "methodName": "columnChanged"
        }, {
            "propName": "source",
            "methodName": "dataChanged"
        }, {
            "propName": "pinnedBottomSource",
            "methodName": "dataBottomChanged"
        }, {
            "propName": "pinnedTopSource",
            "methodName": "dataTopChanged"
        }]; }
}
