/**
* Store is responsible for visible
* Viewport information for each dimension
* Redraw items during scrolling
*/
import { createStore } from '@stencil/store';
import { addMissingItems, getFirstItem, getLastItem, getUpdatedItemsByPosition, isActiveRange, updateMissing } from './viewport.helpers';
import { setStore } from '../../utils/store.utils';
function initialState() {
    return {
        // virtual item information per rendered item
        items: [],
        // virtual dom item order to render
        start: 0,
        end: 0,
        // size of viewport in px
        virtualSize: 0,
        // total number of items
        realCount: 0
    };
}
export default class ViewportStore {
    constructor() {
        this.store = createStore(initialState());
    }
    getItems() {
        return {
            items: this.store.get('items'),
            start: this.store.get('start'),
            end: this.store.get('end')
        };
    }
    setViewport(data) {
        setStore(this.store, data);
    }
    setViewPortCoordinate(position, dimension) {
        // no visible data to calculate
        if (!this.store.get('virtualSize')) {
            return;
        }
        const frameOffset = dimension.frameOffset;
        const outsize = frameOffset * 2 * dimension.originItemSize;
        const virtualSize = this.store.get('virtualSize') + outsize;
        let maxCoordinate = virtualSize;
        if (dimension.realSize > virtualSize) {
            maxCoordinate = dimension.realSize - virtualSize;
        }
        let pos = position;
        pos -= frameOffset * dimension.originItemSize;
        pos = pos < 0 ? 0 : pos < maxCoordinate ? pos : maxCoordinate;
        const firstItem = getFirstItem(this.getItems());
        const lastItem = getLastItem(this.getItems());
        // left position changed
        if (!isActiveRange(pos, firstItem)) {
            const toUpdate = getUpdatedItemsByPosition(pos, this.getItems(), this.store.get('realCount'), virtualSize, dimension);
            setStore(this.store, toUpdate);
            // right position changed
        }
        else if (firstItem && (this.store.get('virtualSize') + pos) > (lastItem === null || lastItem === void 0 ? void 0 : lastItem.end)) {
            // check is any item missing for full fill content
            const missing = addMissingItems(firstItem, this.store.get('realCount'), virtualSize + pos - firstItem.start, this.getItems(), dimension);
            if (missing.length) {
                const items = [...this.store.get('items')];
                const range = {
                    start: this.store.get('start'),
                    end: this.store.get('end')
                };
                updateMissing(items, missing, range);
                setStore(this.store, Object.assign({ items: [...items] }, range));
            }
        }
    }
    setViewPortDimension(sizes) {
        // viewport not inited
        if (!this.store.get('items').length) {
            return;
        }
        const items = this.store.get('items');
        let changedCoordinate = 0;
        for (let item of items) {
            let changedSize = 0;
            // change pos if size change present before
            if (changedCoordinate) {
                item.start += changedCoordinate;
                item.end += changedCoordinate;
            }
            // change size
            const size = sizes[item.itemIndex] || 0;
            if (size) {
                changedSize = size - item.size;
                changedCoordinate += changedSize;
                item.size = size;
                item.end = item.start + size;
            }
        }
        setStore(this.store, { items: [...items] });
    }
}
