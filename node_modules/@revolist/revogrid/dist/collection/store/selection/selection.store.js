import { setStore } from '../../utils/store.utils';
import { getRange } from './selection.helpers';
export default class SelectionStore {
    constructor(lastCell, storePosition, selectionStoreConnector) {
        this.selectionStoreConnector = selectionStoreConnector;
        this.store = selectionStoreConnector.register(storePosition.y, storePosition.x);
        ;
        this.setLastCell(lastCell);
    }
    get focused() {
        return this.store.get('focus');
    }
    get edited() {
        return this.store.get('edit');
    }
    setLastCell(lastCell) {
        // todo: for existing need to update
        setStore(this.store, { lastCell });
    }
    setRange(start, end) {
        const range = getRange(start, end);
        setStore(this.store, {
            range,
            edit: null,
            tempRange: null
        });
    }
    setTempRange(start, end) {
        setStore(this.store, { tempRange: getRange(start, end) });
        setStore(this.store, { edit: null });
    }
    change(area, isMulti = false) {
        this.selectionStoreConnector.change(area, isMulti);
    }
    focus(cell, isMulti = false) {
        if (!cell) {
            this.selectionStoreConnector.clearFocus(this.store);
            return;
        }
        let end = cell;
        if (isMulti) {
            let start = this.store.get('focus');
            if (start) {
                this.setRange(start, end);
                return;
            }
        }
        this.selectionStoreConnector.focus(this.store, cell, end);
    }
    destroy() {
        this.selectionStoreConnector.unregister(this.store);
    }
}
