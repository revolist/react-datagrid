import reduce from 'lodash/reduce';
import { columnTypes, rowTypes } from '../store/storeTypes';
import DimensionStore from '../store/dimension/dimension.store';
export default class DimensionProvider {
    constructor(viewports) {
        this.viewports = viewports;
        this.stores = reduce([...rowTypes, ...columnTypes], (sources, k) => {
            sources[k] = new DimensionStore();
            return sources;
        }, {});
    }
    setDimensionSize(dimensionType, sizes) {
        this.stores[dimensionType].setDimensionSize(sizes);
        this.viewports.stores[dimensionType].setViewPortDimension(sizes);
    }
    setRealSize(items, dimensionType) {
        const realCount = items.length;
        this.viewports.stores[dimensionType].setViewport({ realCount });
        this.stores[dimensionType].setRealSize(realCount);
    }
    setPins(items, dimensionType, pinSizes) {
        const realCount = items.length;
        this.stores[dimensionType].setRealSize(realCount);
        this.stores[dimensionType].setDimensionSize(pinSizes);
        const dimension = this.stores[dimensionType].getCurrentState();
        this.viewports.stores[dimensionType].setViewport({ realCount, virtualSize: dimension.realSize });
        this.viewports.stores[dimensionType].setViewPortCoordinate(0, dimension);
    }
    setViewPortCoordinate(e) {
        const dimension = this.stores[e.dimension].getCurrentState();
        this.viewports.stores[e.dimension].setViewPortCoordinate(e.coordinate, dimension);
    }
    setSettings(data, dimensionType) {
        let stores = [];
        switch (dimensionType) {
            case 'col':
                stores = ['col', 'colPinEnd', 'colPinStart'];
                break;
            case 'row':
                stores = ['row', 'rowPinEnd', 'rowPinStart'];
                break;
        }
        for (let s of stores) {
            this.stores[s].setStore(data);
        }
    }
}
